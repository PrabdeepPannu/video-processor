
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type GamePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Game"
  objects: {
    venue: VenuePayload<ExtArgs>
    team1: TeamPayload<ExtArgs>
    team2: TeamPayload<ExtArgs>
    videos: VideoPayload<ExtArgs>[]
    appearances: AppearanceMatrixPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    date: Date
    sport: string
    createdAt: Date
    updatedAt: Date
    venue_id: number
    team1_id: number
    team2_id: number
  }, ExtArgs["result"]["game"]>
  composites: {}
}

/**
 * Model Game
 * 
 */
export type Game = runtime.Types.DefaultSelection<GamePayload>
export type VenuePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Venue"
  objects: {
    games: GamePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    location: string
    capacity: number
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["venue"]>
  composites: {}
}

/**
 * Model Venue
 * 
 */
export type Venue = runtime.Types.DefaultSelection<VenuePayload>
export type TeamPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Team"
  objects: {
    players: PlayerPayload<ExtArgs>[]
    games1: GamePayload<ExtArgs>[]
    games2: GamePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    league: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["team"]>
  composites: {}
}

/**
 * Model Team
 * 
 */
export type Team = runtime.Types.DefaultSelection<TeamPayload>
export type PlayerPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Player"
  objects: {
    team: TeamPayload<ExtArgs>
    appearances: AppearanceMatrixPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: number
    name: string
    jerseyNumber: number
    position: string
    createdAt: Date
    updatedAt: Date
    team_id: number
  }, ExtArgs["result"]["player"]>
  composites: {}
}

/**
 * Model Player
 * 
 */
export type Player = runtime.Types.DefaultSelection<PlayerPayload>
export type AppearanceMatrixPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AppearanceMatrix"
  objects: {
    game: GamePayload<ExtArgs>
    player: PlayerPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt: Date
    updatedAt: Date
    game_id: number
    player_id: number
  }, ExtArgs["result"]["appearanceMatrix"]>
  composites: {}
}

/**
 * Model AppearanceMatrix
 * 
 */
export type AppearanceMatrix = runtime.Types.DefaultSelection<AppearanceMatrixPayload>
export type VideoPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Video"
  objects: {
    game: GamePayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt: Date
    updatedAt: Date
    game_id: number
  }, ExtArgs["result"]["video"]>
  composites: {}
}

/**
 * Model Video
 * 
 */
export type Video = runtime.Types.DefaultSelection<VideoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Games
 * const games = await prisma.game.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Games
   * const games = await prisma.game.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.game`: Exposes CRUD operations for the **Game** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Games
    * const games = await prisma.game.findMany()
    * ```
    */
  get game(): Prisma.GameDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.venue`: Exposes CRUD operations for the **Venue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Venues
    * const venues = await prisma.venue.findMany()
    * ```
    */
  get venue(): Prisma.VenueDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.appearanceMatrix`: Exposes CRUD operations for the **AppearanceMatrix** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AppearanceMatrices
    * const appearanceMatrices = await prisma.appearanceMatrix.findMany()
    * ```
    */
  get appearanceMatrix(): Prisma.AppearanceMatrixDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Game: 'Game',
    Venue: 'Venue',
    Team: 'Team',
    Player: 'Player',
    AppearanceMatrix: 'AppearanceMatrix',
    Video: 'Video'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'game' | 'venue' | 'team' | 'player' | 'appearanceMatrix' | 'video'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Game: {
        payload: GamePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.GameFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GameFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          findFirst: {
            args: Prisma.GameFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GameFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          findMany: {
            args: Prisma.GameFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>[]
          }
          create: {
            args: Prisma.GameCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          createMany: {
            args: Prisma.GameCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.GameDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          update: {
            args: Prisma.GameUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          deleteMany: {
            args: Prisma.GameDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.GameUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.GameUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<GamePayload>
          }
          aggregate: {
            args: Prisma.GameAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGame>
          }
          groupBy: {
            args: Prisma.GameGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GameGroupByOutputType>[]
          }
          count: {
            args: Prisma.GameCountArgs<ExtArgs>,
            result: $Utils.Optional<GameCountAggregateOutputType> | number
          }
        }
      }
      Venue: {
        payload: VenuePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VenueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VenueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          findFirst: {
            args: Prisma.VenueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VenueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          findMany: {
            args: Prisma.VenueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>[]
          }
          create: {
            args: Prisma.VenueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          createMany: {
            args: Prisma.VenueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VenueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          update: {
            args: Prisma.VenueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          deleteMany: {
            args: Prisma.VenueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VenueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VenueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VenuePayload>
          }
          aggregate: {
            args: Prisma.VenueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVenue>
          }
          groupBy: {
            args: Prisma.VenueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VenueGroupByOutputType>[]
          }
          count: {
            args: Prisma.VenueCountArgs<ExtArgs>,
            result: $Utils.Optional<VenueCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: TeamPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>,
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: PlayerPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>,
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
      AppearanceMatrix: {
        payload: AppearanceMatrixPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AppearanceMatrixFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AppearanceMatrixFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          findFirst: {
            args: Prisma.AppearanceMatrixFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AppearanceMatrixFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          findMany: {
            args: Prisma.AppearanceMatrixFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>[]
          }
          create: {
            args: Prisma.AppearanceMatrixCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          createMany: {
            args: Prisma.AppearanceMatrixCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AppearanceMatrixDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          update: {
            args: Prisma.AppearanceMatrixUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          deleteMany: {
            args: Prisma.AppearanceMatrixDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AppearanceMatrixUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AppearanceMatrixUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AppearanceMatrixPayload>
          }
          aggregate: {
            args: Prisma.AppearanceMatrixAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAppearanceMatrix>
          }
          groupBy: {
            args: Prisma.AppearanceMatrixGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AppearanceMatrixGroupByOutputType>[]
          }
          count: {
            args: Prisma.AppearanceMatrixCountArgs<ExtArgs>,
            result: $Utils.Optional<AppearanceMatrixCountAggregateOutputType> | number
          }
        }
      }
      Video: {
        payload: VideoPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>,
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type GameCountOutputType
   */


  export type GameCountOutputType = {
    videos: number
    appearances: number
  }

  export type GameCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    videos?: boolean | GameCountOutputTypeCountVideosArgs
    appearances?: boolean | GameCountOutputTypeCountAppearancesArgs
  }

  // Custom InputTypes

  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GameCountOutputType
     */
    select?: GameCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountVideosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
  }


  /**
   * GameCountOutputType without action
   */
  export type GameCountOutputTypeCountAppearancesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppearanceMatrixWhereInput
  }



  /**
   * Count Type VenueCountOutputType
   */


  export type VenueCountOutputType = {
    games: number
  }

  export type VenueCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    games?: boolean | VenueCountOutputTypeCountGamesArgs
  }

  // Custom InputTypes

  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VenueCountOutputType
     */
    select?: VenueCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * VenueCountOutputType without action
   */
  export type VenueCountOutputTypeCountGamesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }



  /**
   * Count Type TeamCountOutputType
   */


  export type TeamCountOutputType = {
    players: number
    games1: number
    games2: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    players?: boolean | TeamCountOutputTypeCountPlayersArgs
    games1?: boolean | TeamCountOutputTypeCountGames1Args
    games2?: boolean | TeamCountOutputTypeCountGames2Args
  }

  // Custom InputTypes

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountGames1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }


  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountGames2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
  }



  /**
   * Count Type PlayerCountOutputType
   */


  export type PlayerCountOutputType = {
    appearances: number
  }

  export type PlayerCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    appearances?: boolean | PlayerCountOutputTypeCountAppearancesArgs
  }

  // Custom InputTypes

  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlayerCountOutputType
     */
    select?: PlayerCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlayerCountOutputType without action
   */
  export type PlayerCountOutputTypeCountAppearancesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppearanceMatrixWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Game
   */


  export type AggregateGame = {
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  export type GameAvgAggregateOutputType = {
    id: number | null
    venue_id: number | null
    team1_id: number | null
    team2_id: number | null
  }

  export type GameSumAggregateOutputType = {
    id: number | null
    venue_id: number | null
    team1_id: number | null
    team2_id: number | null
  }

  export type GameMinAggregateOutputType = {
    id: number | null
    name: string | null
    date: Date | null
    sport: string | null
    createdAt: Date | null
    updatedAt: Date | null
    venue_id: number | null
    team1_id: number | null
    team2_id: number | null
  }

  export type GameMaxAggregateOutputType = {
    id: number | null
    name: string | null
    date: Date | null
    sport: string | null
    createdAt: Date | null
    updatedAt: Date | null
    venue_id: number | null
    team1_id: number | null
    team2_id: number | null
  }

  export type GameCountAggregateOutputType = {
    id: number
    name: number
    date: number
    sport: number
    createdAt: number
    updatedAt: number
    venue_id: number
    team1_id: number
    team2_id: number
    _all: number
  }


  export type GameAvgAggregateInputType = {
    id?: true
    venue_id?: true
    team1_id?: true
    team2_id?: true
  }

  export type GameSumAggregateInputType = {
    id?: true
    venue_id?: true
    team1_id?: true
    team2_id?: true
  }

  export type GameMinAggregateInputType = {
    id?: true
    name?: true
    date?: true
    sport?: true
    createdAt?: true
    updatedAt?: true
    venue_id?: true
    team1_id?: true
    team2_id?: true
  }

  export type GameMaxAggregateInputType = {
    id?: true
    name?: true
    date?: true
    sport?: true
    createdAt?: true
    updatedAt?: true
    venue_id?: true
    team1_id?: true
    team2_id?: true
  }

  export type GameCountAggregateInputType = {
    id?: true
    name?: true
    date?: true
    sport?: true
    createdAt?: true
    updatedAt?: true
    venue_id?: true
    team1_id?: true
    team2_id?: true
    _all?: true
  }

  export type GameAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Game to aggregate.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Games
    **/
    _count?: true | GameCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GameAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GameSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GameMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GameMaxAggregateInputType
  }

  export type GetGameAggregateType<T extends GameAggregateArgs> = {
        [P in keyof T & keyof AggregateGame]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGame[P]>
      : GetScalarType<T[P], AggregateGame[P]>
  }




  export type GameGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithAggregationInput>
    by: GameScalarFieldEnum[]
    having?: GameScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GameCountAggregateInputType | true
    _avg?: GameAvgAggregateInputType
    _sum?: GameSumAggregateInputType
    _min?: GameMinAggregateInputType
    _max?: GameMaxAggregateInputType
  }


  export type GameGroupByOutputType = {
    id: number
    name: string
    date: Date
    sport: string
    createdAt: Date
    updatedAt: Date
    venue_id: number
    team1_id: number
    team2_id: number
    _count: GameCountAggregateOutputType | null
    _avg: GameAvgAggregateOutputType | null
    _sum: GameSumAggregateOutputType | null
    _min: GameMinAggregateOutputType | null
    _max: GameMaxAggregateOutputType | null
  }

  type GetGameGroupByPayload<T extends GameGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GameGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GameGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GameGroupByOutputType[P]>
            : GetScalarType<T[P], GameGroupByOutputType[P]>
        }
      >
    >


  export type GameSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    date?: boolean
    sport?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    venue_id?: boolean
    team1_id?: boolean
    team2_id?: boolean
    venue?: boolean | VenueArgs<ExtArgs>
    team1?: boolean | TeamArgs<ExtArgs>
    team2?: boolean | TeamArgs<ExtArgs>
    videos?: boolean | Game$videosArgs<ExtArgs>
    appearances?: boolean | Game$appearancesArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["game"]>

  export type GameSelectScalar = {
    id?: boolean
    name?: boolean
    date?: boolean
    sport?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    venue_id?: boolean
    team1_id?: boolean
    team2_id?: boolean
  }

  export type GameInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    venue?: boolean | VenueArgs<ExtArgs>
    team1?: boolean | TeamArgs<ExtArgs>
    team2?: boolean | TeamArgs<ExtArgs>
    videos?: boolean | Game$videosArgs<ExtArgs>
    appearances?: boolean | Game$appearancesArgs<ExtArgs>
    _count?: boolean | GameCountOutputTypeArgs<ExtArgs>
  }


  type GameGetPayload<S extends boolean | null | undefined | GameArgs> = $Types.GetResult<GamePayload, S>

  type GameCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<GameFindManyArgs, 'select' | 'include'> & {
      select?: GameCountAggregateInputType | true
    }

  export interface GameDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Game'], meta: { name: 'Game' } }
    /**
     * Find zero or one Game that matches the filter.
     * @param {GameFindUniqueArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GameFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GameFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Game'> extends True ? Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Game that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GameFindUniqueOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GameFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Game that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GameFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GameFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Game'> extends True ? Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Game that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindFirstOrThrowArgs} args - Arguments to find a Game
     * @example
     * // Get one Game
     * const game = await prisma.game.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GameFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Games that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Games
     * const games = await prisma.game.findMany()
     * 
     * // Get first 10 Games
     * const games = await prisma.game.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const gameWithIdOnly = await prisma.game.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GameFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<GamePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Game.
     * @param {GameCreateArgs} args - Arguments to create a Game.
     * @example
     * // Create one Game
     * const Game = await prisma.game.create({
     *   data: {
     *     // ... data to create a Game
     *   }
     * })
     * 
    **/
    create<T extends GameCreateArgs<ExtArgs>>(
      args: SelectSubset<T, GameCreateArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Games.
     *     @param {GameCreateManyArgs} args - Arguments to create many Games.
     *     @example
     *     // Create many Games
     *     const game = await prisma.game.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GameCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Game.
     * @param {GameDeleteArgs} args - Arguments to delete one Game.
     * @example
     * // Delete one Game
     * const Game = await prisma.game.delete({
     *   where: {
     *     // ... filter to delete one Game
     *   }
     * })
     * 
    **/
    delete<T extends GameDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, GameDeleteArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Game.
     * @param {GameUpdateArgs} args - Arguments to update one Game.
     * @example
     * // Update one Game
     * const game = await prisma.game.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GameUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpdateArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Games.
     * @param {GameDeleteManyArgs} args - Arguments to filter Games to delete.
     * @example
     * // Delete a few Games
     * const { count } = await prisma.game.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GameDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, GameDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Games
     * const game = await prisma.game.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GameUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Game.
     * @param {GameUpsertArgs} args - Arguments to update or create a Game.
     * @example
     * // Update or create a Game
     * const game = await prisma.game.upsert({
     *   create: {
     *     // ... data to create a Game
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Game we want to update
     *   }
     * })
    **/
    upsert<T extends GameUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, GameUpsertArgs<ExtArgs>>
    ): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Games.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameCountArgs} args - Arguments to filter Games to count.
     * @example
     * // Count the number of Games
     * const count = await prisma.game.count({
     *   where: {
     *     // ... the filter for the Games we want to count
     *   }
     * })
    **/
    count<T extends GameCountArgs>(
      args?: Subset<T, GameCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GameCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GameAggregateArgs>(args: Subset<T, GameAggregateArgs>): Prisma.PrismaPromise<GetGameAggregateType<T>>

    /**
     * Group by Game.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GameGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GameGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GameGroupByArgs['orderBy'] }
        : { orderBy?: GameGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GameGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGameGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Game.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GameClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    venue<T extends VenueArgs<ExtArgs> = {}>(args?: Subset<T, VenueArgs<ExtArgs>>): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    team1<T extends TeamArgs<ExtArgs> = {}>(args?: Subset<T, TeamArgs<ExtArgs>>): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    team2<T extends TeamArgs<ExtArgs> = {}>(args?: Subset<T, TeamArgs<ExtArgs>>): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    videos<T extends Game$videosArgs<ExtArgs> = {}>(args?: Subset<T, Game$videosArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findMany', never>| Null>;

    appearances<T extends Game$appearancesArgs<ExtArgs> = {}>(args?: Subset<T, Game$appearancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Game base type for findUnique actions
   */
  export type GameFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }

  /**
   * Game findUnique
   */
  export interface GameFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GameFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findUniqueOrThrow
   */
  export type GameFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game base type for findFirst actions
   */
  export type GameFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }

  /**
   * Game findFirst
   */
  export interface GameFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends GameFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Game findFirstOrThrow
   */
  export type GameFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Game to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Games.
     */
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game findMany
   */
  export type GameFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter, which Games to fetch.
     */
    where?: GameWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Games to fetch.
     */
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Games.
     */
    cursor?: GameWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Games from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Games.
     */
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Game create
   */
  export type GameCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to create a Game.
     */
    data: XOR<GameCreateInput, GameUncheckedCreateInput>
  }


  /**
   * Game createMany
   */
  export type GameCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Games.
     */
    data: Enumerable<GameCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Game update
   */
  export type GameUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The data needed to update a Game.
     */
    data: XOR<GameUpdateInput, GameUncheckedUpdateInput>
    /**
     * Choose, which Game to update.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game updateMany
   */
  export type GameUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Games.
     */
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyInput>
    /**
     * Filter which Games to update
     */
    where?: GameWhereInput
  }


  /**
   * Game upsert
   */
  export type GameUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * The filter to search for the Game to update in case it exists.
     */
    where: GameWhereUniqueInput
    /**
     * In case the Game found by the `where` argument doesn't exist, create a new Game with this data.
     */
    create: XOR<GameCreateInput, GameUncheckedCreateInput>
    /**
     * In case the Game was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GameUpdateInput, GameUncheckedUpdateInput>
  }


  /**
   * Game delete
   */
  export type GameDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    /**
     * Filter which Game to delete.
     */
    where: GameWhereUniqueInput
  }


  /**
   * Game deleteMany
   */
  export type GameDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Games to delete
     */
    where?: GameWhereInput
  }


  /**
   * Game.videos
   */
  export type Game$videosArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    where?: VideoWhereInput
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    cursor?: VideoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VideoScalarFieldEnum>
  }


  /**
   * Game.appearances
   */
  export type Game$appearancesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    where?: AppearanceMatrixWhereInput
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    cursor?: AppearanceMatrixWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppearanceMatrixScalarFieldEnum>
  }


  /**
   * Game without action
   */
  export type GameArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
  }



  /**
   * Model Venue
   */


  export type AggregateVenue = {
    _count: VenueCountAggregateOutputType | null
    _avg: VenueAvgAggregateOutputType | null
    _sum: VenueSumAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  export type VenueAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type VenueSumAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type VenueMinAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VenueMaxAggregateOutputType = {
    id: number | null
    name: string | null
    location: string | null
    capacity: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VenueCountAggregateOutputType = {
    id: number
    name: number
    location: number
    capacity: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VenueAvgAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type VenueSumAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type VenueMinAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VenueMaxAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VenueCountAggregateInputType = {
    id?: true
    name?: true
    location?: true
    capacity?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VenueAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venue to aggregate.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Venues
    **/
    _count?: true | VenueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VenueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VenueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VenueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VenueMaxAggregateInputType
  }

  export type GetVenueAggregateType<T extends VenueAggregateArgs> = {
        [P in keyof T & keyof AggregateVenue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenue[P]>
      : GetScalarType<T[P], AggregateVenue[P]>
  }




  export type VenueGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VenueWhereInput
    orderBy?: Enumerable<VenueOrderByWithAggregationInput>
    by: VenueScalarFieldEnum[]
    having?: VenueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VenueCountAggregateInputType | true
    _avg?: VenueAvgAggregateInputType
    _sum?: VenueSumAggregateInputType
    _min?: VenueMinAggregateInputType
    _max?: VenueMaxAggregateInputType
  }


  export type VenueGroupByOutputType = {
    id: number
    name: string
    location: string
    capacity: number
    createdAt: Date
    updatedAt: Date
    _count: VenueCountAggregateOutputType | null
    _avg: VenueAvgAggregateOutputType | null
    _sum: VenueSumAggregateOutputType | null
    _min: VenueMinAggregateOutputType | null
    _max: VenueMaxAggregateOutputType | null
  }

  type GetVenueGroupByPayload<T extends VenueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VenueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VenueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VenueGroupByOutputType[P]>
            : GetScalarType<T[P], VenueGroupByOutputType[P]>
        }
      >
    >


  export type VenueSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    games?: boolean | Venue$gamesArgs<ExtArgs>
    _count?: boolean | VenueCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["venue"]>

  export type VenueSelectScalar = {
    id?: boolean
    name?: boolean
    location?: boolean
    capacity?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VenueInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    games?: boolean | Venue$gamesArgs<ExtArgs>
    _count?: boolean | VenueCountOutputTypeArgs<ExtArgs>
  }


  type VenueGetPayload<S extends boolean | null | undefined | VenueArgs> = $Types.GetResult<VenuePayload, S>

  type VenueCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VenueFindManyArgs, 'select' | 'include'> & {
      select?: VenueCountAggregateInputType | true
    }

  export interface VenueDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venue'], meta: { name: 'Venue' } }
    /**
     * Find zero or one Venue that matches the filter.
     * @param {VenueFindUniqueArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VenueFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VenueFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Venue'> extends True ? Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Venue that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VenueFindUniqueOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VenueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VenueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Venue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VenueFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VenueFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Venue'> extends True ? Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Venue that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindFirstOrThrowArgs} args - Arguments to find a Venue
     * @example
     * // Get one Venue
     * const venue = await prisma.venue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VenueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VenueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Venues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Venues
     * const venues = await prisma.venue.findMany()
     * 
     * // Get first 10 Venues
     * const venues = await prisma.venue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const venueWithIdOnly = await prisma.venue.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VenueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VenueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VenuePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Venue.
     * @param {VenueCreateArgs} args - Arguments to create a Venue.
     * @example
     * // Create one Venue
     * const Venue = await prisma.venue.create({
     *   data: {
     *     // ... data to create a Venue
     *   }
     * })
     * 
    **/
    create<T extends VenueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VenueCreateArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Venues.
     *     @param {VenueCreateManyArgs} args - Arguments to create many Venues.
     *     @example
     *     // Create many Venues
     *     const venue = await prisma.venue.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VenueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VenueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Venue.
     * @param {VenueDeleteArgs} args - Arguments to delete one Venue.
     * @example
     * // Delete one Venue
     * const Venue = await prisma.venue.delete({
     *   where: {
     *     // ... filter to delete one Venue
     *   }
     * })
     * 
    **/
    delete<T extends VenueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VenueDeleteArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Venue.
     * @param {VenueUpdateArgs} args - Arguments to update one Venue.
     * @example
     * // Update one Venue
     * const venue = await prisma.venue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VenueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VenueUpdateArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Venues.
     * @param {VenueDeleteManyArgs} args - Arguments to filter Venues to delete.
     * @example
     * // Delete a few Venues
     * const { count } = await prisma.venue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VenueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VenueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Venues
     * const venue = await prisma.venue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VenueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VenueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Venue.
     * @param {VenueUpsertArgs} args - Arguments to update or create a Venue.
     * @example
     * // Update or create a Venue
     * const venue = await prisma.venue.upsert({
     *   create: {
     *     // ... data to create a Venue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venue we want to update
     *   }
     * })
    **/
    upsert<T extends VenueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VenueUpsertArgs<ExtArgs>>
    ): Prisma__VenueClient<$Types.GetResult<VenuePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Venues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueCountArgs} args - Arguments to filter Venues to count.
     * @example
     * // Count the number of Venues
     * const count = await prisma.venue.count({
     *   where: {
     *     // ... the filter for the Venues we want to count
     *   }
     * })
    **/
    count<T extends VenueCountArgs>(
      args?: Subset<T, VenueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VenueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VenueAggregateArgs>(args: Subset<T, VenueAggregateArgs>): Prisma.PrismaPromise<GetVenueAggregateType<T>>

    /**
     * Group by Venue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VenueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VenueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VenueGroupByArgs['orderBy'] }
        : { orderBy?: VenueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VenueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVenueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Venue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VenueClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    games<T extends Venue$gamesArgs<ExtArgs> = {}>(args?: Subset<T, Venue$gamesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GamePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Venue base type for findUnique actions
   */
  export type VenueFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }

  /**
   * Venue findUnique
   */
  export interface VenueFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VenueFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Venue findUniqueOrThrow
   */
  export type VenueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue base type for findFirst actions
   */
  export type VenueFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: Enumerable<VenueScalarFieldEnum>
  }

  /**
   * Venue findFirst
   */
  export interface VenueFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VenueFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Venue findFirstOrThrow
   */
  export type VenueFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venue to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Venues.
     */
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * Venue findMany
   */
  export type VenueFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter, which Venues to fetch.
     */
    where?: VenueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Venues to fetch.
     */
    orderBy?: Enumerable<VenueOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Venues.
     */
    cursor?: VenueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Venues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Venues.
     */
    skip?: number
    distinct?: Enumerable<VenueScalarFieldEnum>
  }


  /**
   * Venue create
   */
  export type VenueCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The data needed to create a Venue.
     */
    data: XOR<VenueCreateInput, VenueUncheckedCreateInput>
  }


  /**
   * Venue createMany
   */
  export type VenueCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Venues.
     */
    data: Enumerable<VenueCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Venue update
   */
  export type VenueUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The data needed to update a Venue.
     */
    data: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
    /**
     * Choose, which Venue to update.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue updateMany
   */
  export type VenueUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Venues.
     */
    data: XOR<VenueUpdateManyMutationInput, VenueUncheckedUpdateManyInput>
    /**
     * Filter which Venues to update
     */
    where?: VenueWhereInput
  }


  /**
   * Venue upsert
   */
  export type VenueUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * The filter to search for the Venue to update in case it exists.
     */
    where: VenueWhereUniqueInput
    /**
     * In case the Venue found by the `where` argument doesn't exist, create a new Venue with this data.
     */
    create: XOR<VenueCreateInput, VenueUncheckedCreateInput>
    /**
     * In case the Venue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VenueUpdateInput, VenueUncheckedUpdateInput>
  }


  /**
   * Venue delete
   */
  export type VenueDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
    /**
     * Filter which Venue to delete.
     */
    where: VenueWhereUniqueInput
  }


  /**
   * Venue deleteMany
   */
  export type VenueDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venues to delete
     */
    where?: VenueWhereInput
  }


  /**
   * Venue.games
   */
  export type Venue$gamesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Venue without action
   */
  export type VenueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venue
     */
    select?: VenueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VenueInclude<ExtArgs> | null
  }



  /**
   * Model Team
   */


  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamAvgAggregateOutputType = {
    id: number | null
  }

  export type TeamSumAggregateOutputType = {
    id: number | null
  }

  export type TeamMinAggregateOutputType = {
    id: number | null
    name: string | null
    league: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: number | null
    name: string | null
    league: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    league: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamAvgAggregateInputType = {
    id?: true
  }

  export type TeamSumAggregateInputType = {
    id?: true
  }

  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    league?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    league?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    league?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeamAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeamSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: Enumerable<TeamOrderByWithAggregationInput>
    by: TeamScalarFieldEnum[]
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _avg?: TeamAvgAggregateInputType
    _sum?: TeamSumAggregateInputType
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }


  export type TeamGroupByOutputType = {
    id: number
    name: string
    league: string
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _avg: TeamAvgAggregateOutputType | null
    _sum: TeamSumAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    league?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    players?: boolean | Team$playersArgs<ExtArgs>
    games1?: boolean | Team$games1Args<ExtArgs>
    games2?: boolean | Team$games2Args<ExtArgs>
    _count?: boolean | TeamCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    league?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    players?: boolean | Team$playersArgs<ExtArgs>
    games1?: boolean | Team$games1Args<ExtArgs>
    games2?: boolean | Team$games2Args<ExtArgs>
    _count?: boolean | TeamCountOutputTypeArgs<ExtArgs>
  }


  type TeamGetPayload<S extends boolean | null | undefined | TeamArgs> = $Types.GetResult<TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<TeamFindManyArgs, 'select' | 'include'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TeamFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Team'> extends True ? Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Team that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TeamFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Team'> extends True ? Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Team that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TeamFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
    **/
    create<T extends TeamCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamCreateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Teams.
     *     @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     *     @example
     *     // Create many Teams
     *     const team = await prisma.team.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TeamCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
    **/
    delete<T extends TeamDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TeamUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TeamDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TeamUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
    **/
    upsert<T extends TeamUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>
    ): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    players<T extends Team$playersArgs<ExtArgs> = {}>(args?: Subset<T, Team$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findMany', never>| Null>;

    games1<T extends Team$games1Args<ExtArgs> = {}>(args?: Subset<T, Team$games1Args<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GamePayload<ExtArgs>, T, 'findMany', never>| Null>;

    games2<T extends Team$games2Args<ExtArgs> = {}>(args?: Subset<T, Team$games2Args<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<GamePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Team base type for findUnique actions
   */
  export type TeamFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUnique
   */
  export interface TeamFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TeamFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team base type for findFirst actions
   */
  export type TeamFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: Enumerable<TeamScalarFieldEnum>
  }

  /**
   * Team findFirst
   */
  export interface TeamFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends TeamFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: Enumerable<TeamOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: Enumerable<TeamScalarFieldEnum>
  }


  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }


  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: Enumerable<TeamCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
  }


  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }


  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }


  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
  }


  /**
   * Team.players
   */
  export type Team$playersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Team.games1
   */
  export type Team$games1Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Team.games2
   */
  export type Team$games2Args<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Game
     */
    select?: GameSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GameInclude<ExtArgs> | null
    where?: GameWhereInput
    orderBy?: Enumerable<GameOrderByWithRelationInput>
    cursor?: GameWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GameScalarFieldEnum>
  }


  /**
   * Team without action
   */
  export type TeamArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TeamInclude<ExtArgs> | null
  }



  /**
   * Model Player
   */


  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerAvgAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    team_id: number | null
  }

  export type PlayerSumAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    team_id: number | null
  }

  export type PlayerMinAggregateOutputType = {
    id: number | null
    name: string | null
    jerseyNumber: number | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
    team_id: number | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: number | null
    name: string | null
    jerseyNumber: number | null
    position: string | null
    createdAt: Date | null
    updatedAt: Date | null
    team_id: number | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    name: number
    jerseyNumber: number
    position: number
    createdAt: number
    updatedAt: number
    team_id: number
    _all: number
  }


  export type PlayerAvgAggregateInputType = {
    id?: true
    jerseyNumber?: true
    team_id?: true
  }

  export type PlayerSumAggregateInputType = {
    id?: true
    jerseyNumber?: true
    team_id?: true
  }

  export type PlayerMinAggregateInputType = {
    id?: true
    name?: true
    jerseyNumber?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    team_id?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    name?: true
    jerseyNumber?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    team_id?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    name?: true
    jerseyNumber?: true
    position?: true
    createdAt?: true
    updatedAt?: true
    team_id?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlayerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlayerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: Enumerable<PlayerOrderByWithAggregationInput>
    by: PlayerScalarFieldEnum[]
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _avg?: PlayerAvgAggregateInputType
    _sum?: PlayerSumAggregateInputType
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }


  export type PlayerGroupByOutputType = {
    id: number
    name: string
    jerseyNumber: number
    position: string
    createdAt: Date
    updatedAt: Date
    team_id: number
    _count: PlayerCountAggregateOutputType | null
    _avg: PlayerAvgAggregateOutputType | null
    _sum: PlayerSumAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    jerseyNumber?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_id?: boolean
    team?: boolean | TeamArgs<ExtArgs>
    appearances?: boolean | Player$appearancesArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    name?: boolean
    jerseyNumber?: boolean
    position?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    team_id?: boolean
  }

  export type PlayerInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    team?: boolean | TeamArgs<ExtArgs>
    appearances?: boolean | Player$appearancesArgs<ExtArgs>
    _count?: boolean | PlayerCountOutputTypeArgs<ExtArgs>
  }


  type PlayerGetPayload<S extends boolean | null | undefined | PlayerArgs> = $Types.GetResult<PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<PlayerFindManyArgs, 'select' | 'include'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlayerFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Player'> extends True ? Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Player that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlayerFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Player'> extends True ? Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Player that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlayerFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
    **/
    create<T extends PlayerCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Players.
     *     @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     *     @example
     *     // Create many Players
     *     const player = await prisma.player.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlayerCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
    **/
    delete<T extends PlayerDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlayerUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlayerDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlayerUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
    **/
    upsert<T extends PlayerUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>
    ): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    team<T extends TeamArgs<ExtArgs> = {}>(args?: Subset<T, TeamArgs<ExtArgs>>): Prisma__TeamClient<$Types.GetResult<TeamPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    appearances<T extends Player$appearancesArgs<ExtArgs> = {}>(args?: Subset<T, Player$appearancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Player base type for findUnique actions
   */
  export type PlayerFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUnique
   */
  export interface PlayerFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PlayerFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player base type for findFirst actions
   */
  export type PlayerFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }

  /**
   * Player findFirst
   */
  export interface PlayerFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends PlayerFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: Enumerable<PlayerOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: Enumerable<PlayerScalarFieldEnum>
  }


  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }


  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: Enumerable<PlayerCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
  }


  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }


  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }


  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
  }


  /**
   * Player.appearances
   */
  export type Player$appearancesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    where?: AppearanceMatrixWhereInput
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    cursor?: AppearanceMatrixWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<AppearanceMatrixScalarFieldEnum>
  }


  /**
   * Player without action
   */
  export type PlayerArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlayerInclude<ExtArgs> | null
  }



  /**
   * Model AppearanceMatrix
   */


  export type AggregateAppearanceMatrix = {
    _count: AppearanceMatrixCountAggregateOutputType | null
    _avg: AppearanceMatrixAvgAggregateOutputType | null
    _sum: AppearanceMatrixSumAggregateOutputType | null
    _min: AppearanceMatrixMinAggregateOutputType | null
    _max: AppearanceMatrixMaxAggregateOutputType | null
  }

  export type AppearanceMatrixAvgAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    inPoint: number | null
    outPoint: number | null
    duration: number | null
    maxSize: number | null
    prominenceScore: number | null
    game_id: number | null
    player_id: number | null
  }

  export type AppearanceMatrixSumAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    inPoint: number | null
    outPoint: number | null
    duration: number | null
    maxSize: number | null
    prominenceScore: number | null
    game_id: number | null
    player_id: number | null
  }

  export type AppearanceMatrixMinAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    inPoint: number | null
    outPoint: number | null
    duration: number | null
    maxSize: number | null
    prominenceScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
    game_id: number | null
    player_id: number | null
  }

  export type AppearanceMatrixMaxAggregateOutputType = {
    id: number | null
    jerseyNumber: number | null
    inPoint: number | null
    outPoint: number | null
    duration: number | null
    maxSize: number | null
    prominenceScore: number | null
    createdAt: Date | null
    updatedAt: Date | null
    game_id: number | null
    player_id: number | null
  }

  export type AppearanceMatrixCountAggregateOutputType = {
    id: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt: number
    updatedAt: number
    game_id: number
    player_id: number
    _all: number
  }


  export type AppearanceMatrixAvgAggregateInputType = {
    id?: true
    jerseyNumber?: true
    inPoint?: true
    outPoint?: true
    duration?: true
    maxSize?: true
    prominenceScore?: true
    game_id?: true
    player_id?: true
  }

  export type AppearanceMatrixSumAggregateInputType = {
    id?: true
    jerseyNumber?: true
    inPoint?: true
    outPoint?: true
    duration?: true
    maxSize?: true
    prominenceScore?: true
    game_id?: true
    player_id?: true
  }

  export type AppearanceMatrixMinAggregateInputType = {
    id?: true
    jerseyNumber?: true
    inPoint?: true
    outPoint?: true
    duration?: true
    maxSize?: true
    prominenceScore?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
    player_id?: true
  }

  export type AppearanceMatrixMaxAggregateInputType = {
    id?: true
    jerseyNumber?: true
    inPoint?: true
    outPoint?: true
    duration?: true
    maxSize?: true
    prominenceScore?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
    player_id?: true
  }

  export type AppearanceMatrixCountAggregateInputType = {
    id?: true
    jerseyNumber?: true
    inPoint?: true
    outPoint?: true
    duration?: true
    maxSize?: true
    prominenceScore?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
    player_id?: true
    _all?: true
  }

  export type AppearanceMatrixAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppearanceMatrix to aggregate.
     */
    where?: AppearanceMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppearanceMatrices to fetch.
     */
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AppearanceMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppearanceMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppearanceMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AppearanceMatrices
    **/
    _count?: true | AppearanceMatrixCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AppearanceMatrixAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AppearanceMatrixSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AppearanceMatrixMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AppearanceMatrixMaxAggregateInputType
  }

  export type GetAppearanceMatrixAggregateType<T extends AppearanceMatrixAggregateArgs> = {
        [P in keyof T & keyof AggregateAppearanceMatrix]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAppearanceMatrix[P]>
      : GetScalarType<T[P], AggregateAppearanceMatrix[P]>
  }




  export type AppearanceMatrixGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AppearanceMatrixWhereInput
    orderBy?: Enumerable<AppearanceMatrixOrderByWithAggregationInput>
    by: AppearanceMatrixScalarFieldEnum[]
    having?: AppearanceMatrixScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AppearanceMatrixCountAggregateInputType | true
    _avg?: AppearanceMatrixAvgAggregateInputType
    _sum?: AppearanceMatrixSumAggregateInputType
    _min?: AppearanceMatrixMinAggregateInputType
    _max?: AppearanceMatrixMaxAggregateInputType
  }


  export type AppearanceMatrixGroupByOutputType = {
    id: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt: Date
    updatedAt: Date
    game_id: number
    player_id: number
    _count: AppearanceMatrixCountAggregateOutputType | null
    _avg: AppearanceMatrixAvgAggregateOutputType | null
    _sum: AppearanceMatrixSumAggregateOutputType | null
    _min: AppearanceMatrixMinAggregateOutputType | null
    _max: AppearanceMatrixMaxAggregateOutputType | null
  }

  type GetAppearanceMatrixGroupByPayload<T extends AppearanceMatrixGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AppearanceMatrixGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AppearanceMatrixGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AppearanceMatrixGroupByOutputType[P]>
            : GetScalarType<T[P], AppearanceMatrixGroupByOutputType[P]>
        }
      >
    >


  export type AppearanceMatrixSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    jerseyNumber?: boolean
    inPoint?: boolean
    outPoint?: boolean
    duration?: boolean
    maxSize?: boolean
    prominenceScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game_id?: boolean
    player_id?: boolean
    game?: boolean | GameArgs<ExtArgs>
    player?: boolean | PlayerArgs<ExtArgs>
  }, ExtArgs["result"]["appearanceMatrix"]>

  export type AppearanceMatrixSelectScalar = {
    id?: boolean
    jerseyNumber?: boolean
    inPoint?: boolean
    outPoint?: boolean
    duration?: boolean
    maxSize?: boolean
    prominenceScore?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game_id?: boolean
    player_id?: boolean
  }

  export type AppearanceMatrixInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    game?: boolean | GameArgs<ExtArgs>
    player?: boolean | PlayerArgs<ExtArgs>
  }


  type AppearanceMatrixGetPayload<S extends boolean | null | undefined | AppearanceMatrixArgs> = $Types.GetResult<AppearanceMatrixPayload, S>

  type AppearanceMatrixCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AppearanceMatrixFindManyArgs, 'select' | 'include'> & {
      select?: AppearanceMatrixCountAggregateInputType | true
    }

  export interface AppearanceMatrixDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AppearanceMatrix'], meta: { name: 'AppearanceMatrix' } }
    /**
     * Find zero or one AppearanceMatrix that matches the filter.
     * @param {AppearanceMatrixFindUniqueArgs} args - Arguments to find a AppearanceMatrix
     * @example
     * // Get one AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AppearanceMatrixFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AppearanceMatrixFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AppearanceMatrix'> extends True ? Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AppearanceMatrix that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AppearanceMatrixFindUniqueOrThrowArgs} args - Arguments to find a AppearanceMatrix
     * @example
     * // Get one AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AppearanceMatrixFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppearanceMatrixFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AppearanceMatrix that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixFindFirstArgs} args - Arguments to find a AppearanceMatrix
     * @example
     * // Get one AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AppearanceMatrixFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AppearanceMatrixFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AppearanceMatrix'> extends True ? Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AppearanceMatrix that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixFindFirstOrThrowArgs} args - Arguments to find a AppearanceMatrix
     * @example
     * // Get one AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AppearanceMatrixFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AppearanceMatrixFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AppearanceMatrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AppearanceMatrices
     * const appearanceMatrices = await prisma.appearanceMatrix.findMany()
     * 
     * // Get first 10 AppearanceMatrices
     * const appearanceMatrices = await prisma.appearanceMatrix.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const appearanceMatrixWithIdOnly = await prisma.appearanceMatrix.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AppearanceMatrixFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppearanceMatrixFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AppearanceMatrix.
     * @param {AppearanceMatrixCreateArgs} args - Arguments to create a AppearanceMatrix.
     * @example
     * // Create one AppearanceMatrix
     * const AppearanceMatrix = await prisma.appearanceMatrix.create({
     *   data: {
     *     // ... data to create a AppearanceMatrix
     *   }
     * })
     * 
    **/
    create<T extends AppearanceMatrixCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AppearanceMatrixCreateArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AppearanceMatrices.
     *     @param {AppearanceMatrixCreateManyArgs} args - Arguments to create many AppearanceMatrices.
     *     @example
     *     // Create many AppearanceMatrices
     *     const appearanceMatrix = await prisma.appearanceMatrix.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AppearanceMatrixCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppearanceMatrixCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AppearanceMatrix.
     * @param {AppearanceMatrixDeleteArgs} args - Arguments to delete one AppearanceMatrix.
     * @example
     * // Delete one AppearanceMatrix
     * const AppearanceMatrix = await prisma.appearanceMatrix.delete({
     *   where: {
     *     // ... filter to delete one AppearanceMatrix
     *   }
     * })
     * 
    **/
    delete<T extends AppearanceMatrixDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AppearanceMatrixDeleteArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AppearanceMatrix.
     * @param {AppearanceMatrixUpdateArgs} args - Arguments to update one AppearanceMatrix.
     * @example
     * // Update one AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AppearanceMatrixUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AppearanceMatrixUpdateArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AppearanceMatrices.
     * @param {AppearanceMatrixDeleteManyArgs} args - Arguments to filter AppearanceMatrices to delete.
     * @example
     * // Delete a few AppearanceMatrices
     * const { count } = await prisma.appearanceMatrix.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AppearanceMatrixDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AppearanceMatrixDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AppearanceMatrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AppearanceMatrices
     * const appearanceMatrix = await prisma.appearanceMatrix.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AppearanceMatrixUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AppearanceMatrixUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AppearanceMatrix.
     * @param {AppearanceMatrixUpsertArgs} args - Arguments to update or create a AppearanceMatrix.
     * @example
     * // Update or create a AppearanceMatrix
     * const appearanceMatrix = await prisma.appearanceMatrix.upsert({
     *   create: {
     *     // ... data to create a AppearanceMatrix
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AppearanceMatrix we want to update
     *   }
     * })
    **/
    upsert<T extends AppearanceMatrixUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AppearanceMatrixUpsertArgs<ExtArgs>>
    ): Prisma__AppearanceMatrixClient<$Types.GetResult<AppearanceMatrixPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AppearanceMatrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixCountArgs} args - Arguments to filter AppearanceMatrices to count.
     * @example
     * // Count the number of AppearanceMatrices
     * const count = await prisma.appearanceMatrix.count({
     *   where: {
     *     // ... the filter for the AppearanceMatrices we want to count
     *   }
     * })
    **/
    count<T extends AppearanceMatrixCountArgs>(
      args?: Subset<T, AppearanceMatrixCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AppearanceMatrixCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AppearanceMatrix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AppearanceMatrixAggregateArgs>(args: Subset<T, AppearanceMatrixAggregateArgs>): Prisma.PrismaPromise<GetAppearanceMatrixAggregateType<T>>

    /**
     * Group by AppearanceMatrix.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AppearanceMatrixGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AppearanceMatrixGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AppearanceMatrixGroupByArgs['orderBy'] }
        : { orderBy?: AppearanceMatrixGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AppearanceMatrixGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAppearanceMatrixGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AppearanceMatrix.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AppearanceMatrixClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    game<T extends GameArgs<ExtArgs> = {}>(args?: Subset<T, GameArgs<ExtArgs>>): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    player<T extends PlayerArgs<ExtArgs> = {}>(args?: Subset<T, PlayerArgs<ExtArgs>>): Prisma__PlayerClient<$Types.GetResult<PlayerPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AppearanceMatrix base type for findUnique actions
   */
  export type AppearanceMatrixFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter, which AppearanceMatrix to fetch.
     */
    where: AppearanceMatrixWhereUniqueInput
  }

  /**
   * AppearanceMatrix findUnique
   */
  export interface AppearanceMatrixFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AppearanceMatrixFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppearanceMatrix findUniqueOrThrow
   */
  export type AppearanceMatrixFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter, which AppearanceMatrix to fetch.
     */
    where: AppearanceMatrixWhereUniqueInput
  }


  /**
   * AppearanceMatrix base type for findFirst actions
   */
  export type AppearanceMatrixFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter, which AppearanceMatrix to fetch.
     */
    where?: AppearanceMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppearanceMatrices to fetch.
     */
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppearanceMatrices.
     */
    cursor?: AppearanceMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppearanceMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppearanceMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppearanceMatrices.
     */
    distinct?: Enumerable<AppearanceMatrixScalarFieldEnum>
  }

  /**
   * AppearanceMatrix findFirst
   */
  export interface AppearanceMatrixFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AppearanceMatrixFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AppearanceMatrix findFirstOrThrow
   */
  export type AppearanceMatrixFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter, which AppearanceMatrix to fetch.
     */
    where?: AppearanceMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppearanceMatrices to fetch.
     */
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AppearanceMatrices.
     */
    cursor?: AppearanceMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppearanceMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppearanceMatrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AppearanceMatrices.
     */
    distinct?: Enumerable<AppearanceMatrixScalarFieldEnum>
  }


  /**
   * AppearanceMatrix findMany
   */
  export type AppearanceMatrixFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter, which AppearanceMatrices to fetch.
     */
    where?: AppearanceMatrixWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AppearanceMatrices to fetch.
     */
    orderBy?: Enumerable<AppearanceMatrixOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AppearanceMatrices.
     */
    cursor?: AppearanceMatrixWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AppearanceMatrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AppearanceMatrices.
     */
    skip?: number
    distinct?: Enumerable<AppearanceMatrixScalarFieldEnum>
  }


  /**
   * AppearanceMatrix create
   */
  export type AppearanceMatrixCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * The data needed to create a AppearanceMatrix.
     */
    data: XOR<AppearanceMatrixCreateInput, AppearanceMatrixUncheckedCreateInput>
  }


  /**
   * AppearanceMatrix createMany
   */
  export type AppearanceMatrixCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AppearanceMatrices.
     */
    data: Enumerable<AppearanceMatrixCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AppearanceMatrix update
   */
  export type AppearanceMatrixUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * The data needed to update a AppearanceMatrix.
     */
    data: XOR<AppearanceMatrixUpdateInput, AppearanceMatrixUncheckedUpdateInput>
    /**
     * Choose, which AppearanceMatrix to update.
     */
    where: AppearanceMatrixWhereUniqueInput
  }


  /**
   * AppearanceMatrix updateMany
   */
  export type AppearanceMatrixUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AppearanceMatrices.
     */
    data: XOR<AppearanceMatrixUpdateManyMutationInput, AppearanceMatrixUncheckedUpdateManyInput>
    /**
     * Filter which AppearanceMatrices to update
     */
    where?: AppearanceMatrixWhereInput
  }


  /**
   * AppearanceMatrix upsert
   */
  export type AppearanceMatrixUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * The filter to search for the AppearanceMatrix to update in case it exists.
     */
    where: AppearanceMatrixWhereUniqueInput
    /**
     * In case the AppearanceMatrix found by the `where` argument doesn't exist, create a new AppearanceMatrix with this data.
     */
    create: XOR<AppearanceMatrixCreateInput, AppearanceMatrixUncheckedCreateInput>
    /**
     * In case the AppearanceMatrix was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AppearanceMatrixUpdateInput, AppearanceMatrixUncheckedUpdateInput>
  }


  /**
   * AppearanceMatrix delete
   */
  export type AppearanceMatrixDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
    /**
     * Filter which AppearanceMatrix to delete.
     */
    where: AppearanceMatrixWhereUniqueInput
  }


  /**
   * AppearanceMatrix deleteMany
   */
  export type AppearanceMatrixDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AppearanceMatrices to delete
     */
    where?: AppearanceMatrixWhereInput
  }


  /**
   * AppearanceMatrix without action
   */
  export type AppearanceMatrixArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AppearanceMatrix
     */
    select?: AppearanceMatrixSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AppearanceMatrixInclude<ExtArgs> | null
  }



  /**
   * Model Video
   */


  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoAvgAggregateOutputType = {
    id: number | null
    duration: number | null
    frameRate: number | null
    game_id: number | null
  }

  export type VideoSumAggregateOutputType = {
    id: number | null
    duration: number | null
    frameRate: number | null
    game_id: number | null
  }

  export type VideoMinAggregateOutputType = {
    id: number | null
    url: string | null
    format: string | null
    duration: number | null
    resolution: string | null
    frameRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    game_id: number | null
  }

  export type VideoMaxAggregateOutputType = {
    id: number | null
    url: string | null
    format: string | null
    duration: number | null
    resolution: string | null
    frameRate: number | null
    createdAt: Date | null
    updatedAt: Date | null
    game_id: number | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    url: number
    format: number
    duration: number
    resolution: number
    frameRate: number
    createdAt: number
    updatedAt: number
    game_id: number
    _all: number
  }


  export type VideoAvgAggregateInputType = {
    id?: true
    duration?: true
    frameRate?: true
    game_id?: true
  }

  export type VideoSumAggregateInputType = {
    id?: true
    duration?: true
    frameRate?: true
    game_id?: true
  }

  export type VideoMinAggregateInputType = {
    id?: true
    url?: true
    format?: true
    duration?: true
    resolution?: true
    frameRate?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    url?: true
    format?: true
    duration?: true
    resolution?: true
    frameRate?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    url?: true
    format?: true
    duration?: true
    resolution?: true
    frameRate?: true
    createdAt?: true
    updatedAt?: true
    game_id?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: Enumerable<VideoOrderByWithAggregationInput>
    by: VideoScalarFieldEnum[]
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _avg?: VideoAvgAggregateInputType
    _sum?: VideoSumAggregateInputType
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }


  export type VideoGroupByOutputType = {
    id: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt: Date
    updatedAt: Date
    game_id: number
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    format?: boolean
    duration?: boolean
    resolution?: boolean
    frameRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game_id?: boolean
    game?: boolean | GameArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    url?: boolean
    format?: boolean
    duration?: boolean
    resolution?: boolean
    frameRate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    game_id?: boolean
  }

  export type VideoInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    game?: boolean | GameArgs<ExtArgs>
  }


  type VideoGetPayload<S extends boolean | null | undefined | VideoArgs> = $Types.GetResult<VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VideoFindManyArgs, 'select' | 'include'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VideoFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Video'> extends True ? Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Video that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VideoFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Video'> extends True ? Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Video that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VideoFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VideoPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
    **/
    create<T extends VideoCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoCreateArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Videos.
     *     @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     *     @example
     *     // Create many Videos
     *     const video = await prisma.video.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VideoCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
    **/
    delete<T extends VideoDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VideoUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VideoDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VideoUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
    **/
    upsert<T extends VideoUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>
    ): Prisma__VideoClient<$Types.GetResult<VideoPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    game<T extends GameArgs<ExtArgs> = {}>(args?: Subset<T, GameArgs<ExtArgs>>): Prisma__GameClient<$Types.GetResult<GamePayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Video base type for findUnique actions
   */
  export type VideoFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUnique
   */
  export interface VideoFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideoFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video base type for findFirst actions
   */
  export type VideoFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: Enumerable<VideoScalarFieldEnum>
  }

  /**
   * Video findFirst
   */
  export interface VideoFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VideoFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: Enumerable<VideoScalarFieldEnum>
  }


  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: Enumerable<VideoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: Enumerable<VideoScalarFieldEnum>
  }


  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }


  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: Enumerable<VideoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
  }


  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }


  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }


  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
  }


  /**
   * Video without action
   */
  export type VideoArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VideoInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const GameScalarFieldEnum: {
    id: 'id',
    name: 'name',
    date: 'date',
    sport: 'sport',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    venue_id: 'venue_id',
    team1_id: 'team1_id',
    team2_id: 'team2_id'
  };

  export type GameScalarFieldEnum = (typeof GameScalarFieldEnum)[keyof typeof GameScalarFieldEnum]


  export const VenueScalarFieldEnum: {
    id: 'id',
    name: 'name',
    location: 'location',
    capacity: 'capacity',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VenueScalarFieldEnum = (typeof VenueScalarFieldEnum)[keyof typeof VenueScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    league: 'league',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    jerseyNumber: 'jerseyNumber',
    position: 'position',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    team_id: 'team_id'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const AppearanceMatrixScalarFieldEnum: {
    id: 'id',
    jerseyNumber: 'jerseyNumber',
    inPoint: 'inPoint',
    outPoint: 'outPoint',
    duration: 'duration',
    maxSize: 'maxSize',
    prominenceScore: 'prominenceScore',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    game_id: 'game_id',
    player_id: 'player_id'
  };

  export type AppearanceMatrixScalarFieldEnum = (typeof AppearanceMatrixScalarFieldEnum)[keyof typeof AppearanceMatrixScalarFieldEnum]


  export const VideoScalarFieldEnum: {
    id: 'id',
    url: 'url',
    format: 'format',
    duration: 'duration',
    resolution: 'resolution',
    frameRate: 'frameRate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    game_id: 'game_id'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type GameWhereInput = {
    AND?: Enumerable<GameWhereInput>
    OR?: Enumerable<GameWhereInput>
    NOT?: Enumerable<GameWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    date?: DateTimeFilter | Date | string
    sport?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    venue_id?: IntFilter | number
    team1_id?: IntFilter | number
    team2_id?: IntFilter | number
    venue?: XOR<VenueRelationFilter, VenueWhereInput>
    team1?: XOR<TeamRelationFilter, TeamWhereInput>
    team2?: XOR<TeamRelationFilter, TeamWhereInput>
    videos?: VideoListRelationFilter
    appearances?: AppearanceMatrixListRelationFilter
  }

  export type GameOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    sport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
    venue?: VenueOrderByWithRelationInput
    team1?: TeamOrderByWithRelationInput
    team2?: TeamOrderByWithRelationInput
    videos?: VideoOrderByRelationAggregateInput
    appearances?: AppearanceMatrixOrderByRelationAggregateInput
  }

  export type GameWhereUniqueInput = {
    id?: number
  }

  export type GameOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    sport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
    _count?: GameCountOrderByAggregateInput
    _avg?: GameAvgOrderByAggregateInput
    _max?: GameMaxOrderByAggregateInput
    _min?: GameMinOrderByAggregateInput
    _sum?: GameSumOrderByAggregateInput
  }

  export type GameScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GameScalarWhereWithAggregatesInput>
    OR?: Enumerable<GameScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GameScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    date?: DateTimeWithAggregatesFilter | Date | string
    sport?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    venue_id?: IntWithAggregatesFilter | number
    team1_id?: IntWithAggregatesFilter | number
    team2_id?: IntWithAggregatesFilter | number
  }

  export type VenueWhereInput = {
    AND?: Enumerable<VenueWhereInput>
    OR?: Enumerable<VenueWhereInput>
    NOT?: Enumerable<VenueWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    location?: StringFilter | string
    capacity?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    games?: GameListRelationFilter
  }

  export type VenueOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    games?: GameOrderByRelationAggregateInput
  }

  export type VenueWhereUniqueInput = {
    id?: number
  }

  export type VenueOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VenueCountOrderByAggregateInput
    _avg?: VenueAvgOrderByAggregateInput
    _max?: VenueMaxOrderByAggregateInput
    _min?: VenueMinOrderByAggregateInput
    _sum?: VenueSumOrderByAggregateInput
  }

  export type VenueScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VenueScalarWhereWithAggregatesInput>
    OR?: Enumerable<VenueScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VenueScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    location?: StringWithAggregatesFilter | string
    capacity?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TeamWhereInput = {
    AND?: Enumerable<TeamWhereInput>
    OR?: Enumerable<TeamWhereInput>
    NOT?: Enumerable<TeamWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    league?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    players?: PlayerListRelationFilter
    games1?: GameListRelationFilter
    games2?: GameListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    league?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    players?: PlayerOrderByRelationAggregateInput
    games1?: GameOrderByRelationAggregateInput
    games2?: GameOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = {
    id?: number
  }

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    league?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _avg?: TeamAvgOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
    _sum?: TeamSumOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TeamScalarWhereWithAggregatesInput>
    OR?: Enumerable<TeamScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TeamScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    league?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type PlayerWhereInput = {
    AND?: Enumerable<PlayerWhereInput>
    OR?: Enumerable<PlayerWhereInput>
    NOT?: Enumerable<PlayerWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    jerseyNumber?: IntFilter | number
    position?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    team_id?: IntFilter | number
    team?: XOR<TeamRelationFilter, TeamWhereInput>
    appearances?: AppearanceMatrixListRelationFilter
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    jerseyNumber?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_id?: SortOrder
    team?: TeamOrderByWithRelationInput
    appearances?: AppearanceMatrixOrderByRelationAggregateInput
  }

  export type PlayerWhereUniqueInput = {
    id?: number
  }

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    jerseyNumber?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_id?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _avg?: PlayerAvgOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
    _sum?: PlayerSumOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    OR?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    NOT?: Enumerable<PlayerScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    jerseyNumber?: IntWithAggregatesFilter | number
    position?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    team_id?: IntWithAggregatesFilter | number
  }

  export type AppearanceMatrixWhereInput = {
    AND?: Enumerable<AppearanceMatrixWhereInput>
    OR?: Enumerable<AppearanceMatrixWhereInput>
    NOT?: Enumerable<AppearanceMatrixWhereInput>
    id?: IntFilter | number
    jerseyNumber?: IntFilter | number
    inPoint?: IntFilter | number
    outPoint?: IntFilter | number
    duration?: IntFilter | number
    maxSize?: FloatFilter | number
    prominenceScore?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    game_id?: IntFilter | number
    player_id?: IntFilter | number
    game?: XOR<GameRelationFilter, GameWhereInput>
    player?: XOR<PlayerRelationFilter, PlayerWhereInput>
  }

  export type AppearanceMatrixOrderByWithRelationInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
    game?: GameOrderByWithRelationInput
    player?: PlayerOrderByWithRelationInput
  }

  export type AppearanceMatrixWhereUniqueInput = {
    id?: number
  }

  export type AppearanceMatrixOrderByWithAggregationInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
    _count?: AppearanceMatrixCountOrderByAggregateInput
    _avg?: AppearanceMatrixAvgOrderByAggregateInput
    _max?: AppearanceMatrixMaxOrderByAggregateInput
    _min?: AppearanceMatrixMinOrderByAggregateInput
    _sum?: AppearanceMatrixSumOrderByAggregateInput
  }

  export type AppearanceMatrixScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AppearanceMatrixScalarWhereWithAggregatesInput>
    OR?: Enumerable<AppearanceMatrixScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AppearanceMatrixScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    jerseyNumber?: IntWithAggregatesFilter | number
    inPoint?: IntWithAggregatesFilter | number
    outPoint?: IntWithAggregatesFilter | number
    duration?: IntWithAggregatesFilter | number
    maxSize?: FloatWithAggregatesFilter | number
    prominenceScore?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    game_id?: IntWithAggregatesFilter | number
    player_id?: IntWithAggregatesFilter | number
  }

  export type VideoWhereInput = {
    AND?: Enumerable<VideoWhereInput>
    OR?: Enumerable<VideoWhereInput>
    NOT?: Enumerable<VideoWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    format?: StringFilter | string
    duration?: IntFilter | number
    resolution?: StringFilter | string
    frameRate?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    game_id?: IntFilter | number
    game?: XOR<GameRelationFilter, GameWhereInput>
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    format?: SortOrder
    duration?: SortOrder
    resolution?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    game?: GameOrderByWithRelationInput
  }

  export type VideoWhereUniqueInput = {
    id?: number
  }

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    format?: SortOrder
    duration?: SortOrder
    resolution?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _avg?: VideoAvgOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
    _sum?: VideoSumOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VideoScalarWhereWithAggregatesInput>
    OR?: Enumerable<VideoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VideoScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    url?: StringWithAggregatesFilter | string
    format?: StringWithAggregatesFilter | string
    duration?: IntWithAggregatesFilter | number
    resolution?: StringWithAggregatesFilter | string
    frameRate?: FloatWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    game_id?: IntWithAggregatesFilter | number
  }

  export type GameCreateInput = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue: VenueCreateNestedOneWithoutGamesInput
    team1: TeamCreateNestedOneWithoutGames1Input
    team2: TeamCreateNestedOneWithoutGames2Input
    videos?: VideoCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
    team2_id: number
    videos?: VideoUncheckedCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: VenueUpdateOneRequiredWithoutGamesNestedInput
    team1?: TeamUpdateOneRequiredWithoutGames1NestedInput
    team2?: TeamUpdateOneRequiredWithoutGames2NestedInput
    videos?: VideoUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
    videos?: VideoUncheckedUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameCreateManyInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
    team2_id: number
  }

  export type GameUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
  }

  export type VenueCreateInput = {
    name: string
    location: string
    capacity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameCreateNestedManyWithoutVenueInput
  }

  export type VenueUncheckedCreateInput = {
    id?: number
    name: string
    location: string
    capacity: number
    createdAt?: Date | string
    updatedAt?: Date | string
    games?: GameUncheckedCreateNestedManyWithoutVenueInput
  }

  export type VenueUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUpdateManyWithoutVenueNestedInput
  }

  export type VenueUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games?: GameUncheckedUpdateManyWithoutVenueNestedInput
  }

  export type VenueCreateManyInput = {
    id?: number
    name: string
    location: string
    capacity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VenueUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VenueUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamCreateInput = {
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerCreateNestedManyWithoutTeamInput
    games1?: GameCreateNestedManyWithoutTeam1Input
    games2?: GameCreateNestedManyWithoutTeam2Input
  }

  export type TeamUncheckedCreateInput = {
    id?: number
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    games1?: GameUncheckedCreateNestedManyWithoutTeam1Input
    games2?: GameUncheckedCreateNestedManyWithoutTeam2Input
  }

  export type TeamUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUpdateManyWithoutTeamNestedInput
    games1?: GameUpdateManyWithoutTeam1NestedInput
    games2?: GameUpdateManyWithoutTeam2NestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    games1?: GameUncheckedUpdateManyWithoutTeam1NestedInput
    games2?: GameUncheckedUpdateManyWithoutTeam2NestedInput
  }

  export type TeamCreateManyInput = {
    id?: number
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerCreateInput = {
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
    appearances?: AppearanceMatrixCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: number
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team_id: number
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_id?: IntFieldUpdateOperationsInput | number
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerCreateManyInput = {
    id?: number
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team_id: number
  }

  export type PlayerUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_id?: IntFieldUpdateOperationsInput | number
  }

  export type AppearanceMatrixCreateInput = {
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAppearancesInput
    player: PlayerCreateNestedOneWithoutAppearancesInput
  }

  export type AppearanceMatrixUncheckedCreateInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
    player_id: number
  }

  export type AppearanceMatrixUpdateInput = {
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAppearancesNestedInput
    player?: PlayerUpdateOneRequiredWithoutAppearancesNestedInput
  }

  export type AppearanceMatrixUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
  }

  export type AppearanceMatrixCreateManyInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
    player_id: number
  }

  export type AppearanceMatrixUpdateManyMutationInput = {
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppearanceMatrixUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: IntFieldUpdateOperationsInput | number
    player_id?: IntFieldUpdateOperationsInput | number
  }

  export type VideoCreateInput = {
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutVideosInput
  }

  export type VideoUncheckedCreateInput = {
    id?: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
  }

  export type VideoUpdateInput = {
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutVideosNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: IntFieldUpdateOperationsInput | number
  }

  export type VideoCreateManyInput = {
    id?: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
  }

  export type VideoUpdateManyMutationInput = {
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type VenueRelationFilter = {
    is?: VenueWhereInput | null
    isNot?: VenueWhereInput | null
  }

  export type TeamRelationFilter = {
    is?: TeamWhereInput | null
    isNot?: TeamWhereInput | null
  }

  export type VideoListRelationFilter = {
    every?: VideoWhereInput
    some?: VideoWhereInput
    none?: VideoWhereInput
  }

  export type AppearanceMatrixListRelationFilter = {
    every?: AppearanceMatrixWhereInput
    some?: AppearanceMatrixWhereInput
    none?: AppearanceMatrixWhereInput
  }

  export type VideoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AppearanceMatrixOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GameCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    sport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
  }

  export type GameAvgOrderByAggregateInput = {
    id?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
  }

  export type GameMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    sport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
  }

  export type GameMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    date?: SortOrder
    sport?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
  }

  export type GameSumOrderByAggregateInput = {
    id?: SortOrder
    venue_id?: SortOrder
    team1_id?: SortOrder
    team2_id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GameListRelationFilter = {
    every?: GameWhereInput
    some?: GameWhereInput
    none?: GameWhereInput
  }

  export type GameOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VenueCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VenueAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type VenueMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VenueMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    location?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VenueSumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    league?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    league?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    league?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    jerseyNumber?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_id?: SortOrder
  }

  export type PlayerAvgOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    team_id?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    jerseyNumber?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_id?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    jerseyNumber?: SortOrder
    position?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    team_id?: SortOrder
  }

  export type PlayerSumOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    team_id?: SortOrder
  }

  export type FloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type GameRelationFilter = {
    is?: GameWhereInput | null
    isNot?: GameWhereInput | null
  }

  export type PlayerRelationFilter = {
    is?: PlayerWhereInput | null
    isNot?: PlayerWhereInput | null
  }

  export type AppearanceMatrixCountOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
  }

  export type AppearanceMatrixAvgOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
  }

  export type AppearanceMatrixMaxOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
  }

  export type AppearanceMatrixMinOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
  }

  export type AppearanceMatrixSumOrderByAggregateInput = {
    id?: SortOrder
    jerseyNumber?: SortOrder
    inPoint?: SortOrder
    outPoint?: SortOrder
    duration?: SortOrder
    maxSize?: SortOrder
    prominenceScore?: SortOrder
    game_id?: SortOrder
    player_id?: SortOrder
  }

  export type FloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    format?: SortOrder
    duration?: SortOrder
    resolution?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
  }

  export type VideoAvgOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    frameRate?: SortOrder
    game_id?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    format?: SortOrder
    duration?: SortOrder
    resolution?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    format?: SortOrder
    duration?: SortOrder
    resolution?: SortOrder
    frameRate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    game_id?: SortOrder
  }

  export type VideoSumOrderByAggregateInput = {
    id?: SortOrder
    duration?: SortOrder
    frameRate?: SortOrder
    game_id?: SortOrder
  }

  export type VenueCreateNestedOneWithoutGamesInput = {
    create?: XOR<VenueCreateWithoutGamesInput, VenueUncheckedCreateWithoutGamesInput>
    connectOrCreate?: VenueCreateOrConnectWithoutGamesInput
    connect?: VenueWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutGames1Input = {
    create?: XOR<TeamCreateWithoutGames1Input, TeamUncheckedCreateWithoutGames1Input>
    connectOrCreate?: TeamCreateOrConnectWithoutGames1Input
    connect?: TeamWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutGames2Input = {
    create?: XOR<TeamCreateWithoutGames2Input, TeamUncheckedCreateWithoutGames2Input>
    connectOrCreate?: TeamCreateOrConnectWithoutGames2Input
    connect?: TeamWhereUniqueInput
  }

  export type VideoCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<VideoCreateWithoutGameInput>, Enumerable<VideoUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VideoCreateOrConnectWithoutGameInput>
    createMany?: VideoCreateManyGameInputEnvelope
    connect?: Enumerable<VideoWhereUniqueInput>
  }

  export type AppearanceMatrixCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutGameInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutGameInput>
    createMany?: AppearanceMatrixCreateManyGameInputEnvelope
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
  }

  export type VideoUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<VideoCreateWithoutGameInput>, Enumerable<VideoUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VideoCreateOrConnectWithoutGameInput>
    createMany?: VideoCreateManyGameInputEnvelope
    connect?: Enumerable<VideoWhereUniqueInput>
  }

  export type AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutGameInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutGameInput>
    createMany?: AppearanceMatrixCreateManyGameInputEnvelope
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type VenueUpdateOneRequiredWithoutGamesNestedInput = {
    create?: XOR<VenueCreateWithoutGamesInput, VenueUncheckedCreateWithoutGamesInput>
    connectOrCreate?: VenueCreateOrConnectWithoutGamesInput
    upsert?: VenueUpsertWithoutGamesInput
    connect?: VenueWhereUniqueInput
    update?: XOR<VenueUpdateWithoutGamesInput, VenueUncheckedUpdateWithoutGamesInput>
  }

  export type TeamUpdateOneRequiredWithoutGames1NestedInput = {
    create?: XOR<TeamCreateWithoutGames1Input, TeamUncheckedCreateWithoutGames1Input>
    connectOrCreate?: TeamCreateOrConnectWithoutGames1Input
    upsert?: TeamUpsertWithoutGames1Input
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutGames1Input, TeamUncheckedUpdateWithoutGames1Input>
  }

  export type TeamUpdateOneRequiredWithoutGames2NestedInput = {
    create?: XOR<TeamCreateWithoutGames2Input, TeamUncheckedCreateWithoutGames2Input>
    connectOrCreate?: TeamCreateOrConnectWithoutGames2Input
    upsert?: TeamUpsertWithoutGames2Input
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutGames2Input, TeamUncheckedUpdateWithoutGames2Input>
  }

  export type VideoUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<VideoCreateWithoutGameInput>, Enumerable<VideoUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VideoCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<VideoUpsertWithWhereUniqueWithoutGameInput>
    createMany?: VideoCreateManyGameInputEnvelope
    set?: Enumerable<VideoWhereUniqueInput>
    disconnect?: Enumerable<VideoWhereUniqueInput>
    delete?: Enumerable<VideoWhereUniqueInput>
    connect?: Enumerable<VideoWhereUniqueInput>
    update?: Enumerable<VideoUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<VideoUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<VideoScalarWhereInput>
  }

  export type AppearanceMatrixUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutGameInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<AppearanceMatrixUpsertWithWhereUniqueWithoutGameInput>
    createMany?: AppearanceMatrixCreateManyGameInputEnvelope
    set?: Enumerable<AppearanceMatrixWhereUniqueInput>
    disconnect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    delete?: Enumerable<AppearanceMatrixWhereUniqueInput>
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    update?: Enumerable<AppearanceMatrixUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<AppearanceMatrixUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<AppearanceMatrixScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type VideoUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<VideoCreateWithoutGameInput>, Enumerable<VideoUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<VideoCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<VideoUpsertWithWhereUniqueWithoutGameInput>
    createMany?: VideoCreateManyGameInputEnvelope
    set?: Enumerable<VideoWhereUniqueInput>
    disconnect?: Enumerable<VideoWhereUniqueInput>
    delete?: Enumerable<VideoWhereUniqueInput>
    connect?: Enumerable<VideoWhereUniqueInput>
    update?: Enumerable<VideoUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<VideoUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<VideoScalarWhereInput>
  }

  export type AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutGameInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutGameInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutGameInput>
    upsert?: Enumerable<AppearanceMatrixUpsertWithWhereUniqueWithoutGameInput>
    createMany?: AppearanceMatrixCreateManyGameInputEnvelope
    set?: Enumerable<AppearanceMatrixWhereUniqueInput>
    disconnect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    delete?: Enumerable<AppearanceMatrixWhereUniqueInput>
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    update?: Enumerable<AppearanceMatrixUpdateWithWhereUniqueWithoutGameInput>
    updateMany?: Enumerable<AppearanceMatrixUpdateManyWithWhereWithoutGameInput>
    deleteMany?: Enumerable<AppearanceMatrixScalarWhereInput>
  }

  export type GameCreateNestedManyWithoutVenueInput = {
    create?: XOR<Enumerable<GameCreateWithoutVenueInput>, Enumerable<GameUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutVenueInput>
    createMany?: GameCreateManyVenueInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutVenueInput = {
    create?: XOR<Enumerable<GameCreateWithoutVenueInput>, Enumerable<GameUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutVenueInput>
    createMany?: GameCreateManyVenueInputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUpdateManyWithoutVenueNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutVenueInput>, Enumerable<GameUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutVenueInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutVenueInput>
    createMany?: GameCreateManyVenueInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutVenueInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutVenueInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutVenueNestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutVenueInput>, Enumerable<GameUncheckedCreateWithoutVenueInput>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutVenueInput>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutVenueInput>
    createMany?: GameCreateManyVenueInputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutVenueInput>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutVenueInput>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type PlayerCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: Enumerable<PlayerWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutTeam1Input = {
    create?: XOR<Enumerable<GameCreateWithoutTeam1Input>, Enumerable<GameUncheckedCreateWithoutTeam1Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam1Input>
    createMany?: GameCreateManyTeam1InputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameCreateNestedManyWithoutTeam2Input = {
    create?: XOR<Enumerable<GameCreateWithoutTeam2Input>, Enumerable<GameUncheckedCreateWithoutTeam2Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam2Input>
    createMany?: GameCreateManyTeam2InputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type PlayerUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    connect?: Enumerable<PlayerWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutTeam1Input = {
    create?: XOR<Enumerable<GameCreateWithoutTeam1Input>, Enumerable<GameUncheckedCreateWithoutTeam1Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam1Input>
    createMany?: GameCreateManyTeam1InputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type GameUncheckedCreateNestedManyWithoutTeam2Input = {
    create?: XOR<Enumerable<GameCreateWithoutTeam2Input>, Enumerable<GameUncheckedCreateWithoutTeam2Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam2Input>
    createMany?: GameCreateManyTeam2InputEnvelope
    connect?: Enumerable<GameWhereUniqueInput>
  }

  export type PlayerUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<PlayerUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: Enumerable<PlayerWhereUniqueInput>
    disconnect?: Enumerable<PlayerWhereUniqueInput>
    delete?: Enumerable<PlayerWhereUniqueInput>
    connect?: Enumerable<PlayerWhereUniqueInput>
    update?: Enumerable<PlayerUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<PlayerUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<PlayerScalarWhereInput>
  }

  export type GameUpdateManyWithoutTeam1NestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutTeam1Input>, Enumerable<GameUncheckedCreateWithoutTeam1Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam1Input>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutTeam1Input>
    createMany?: GameCreateManyTeam1InputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutTeam1Input>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutTeam1Input>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUpdateManyWithoutTeam2NestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutTeam2Input>, Enumerable<GameUncheckedCreateWithoutTeam2Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam2Input>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutTeam2Input>
    createMany?: GameCreateManyTeam2InputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutTeam2Input>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutTeam2Input>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type PlayerUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<Enumerable<PlayerCreateWithoutTeamInput>, Enumerable<PlayerUncheckedCreateWithoutTeamInput>>
    connectOrCreate?: Enumerable<PlayerCreateOrConnectWithoutTeamInput>
    upsert?: Enumerable<PlayerUpsertWithWhereUniqueWithoutTeamInput>
    createMany?: PlayerCreateManyTeamInputEnvelope
    set?: Enumerable<PlayerWhereUniqueInput>
    disconnect?: Enumerable<PlayerWhereUniqueInput>
    delete?: Enumerable<PlayerWhereUniqueInput>
    connect?: Enumerable<PlayerWhereUniqueInput>
    update?: Enumerable<PlayerUpdateWithWhereUniqueWithoutTeamInput>
    updateMany?: Enumerable<PlayerUpdateManyWithWhereWithoutTeamInput>
    deleteMany?: Enumerable<PlayerScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutTeam1NestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutTeam1Input>, Enumerable<GameUncheckedCreateWithoutTeam1Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam1Input>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutTeam1Input>
    createMany?: GameCreateManyTeam1InputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutTeam1Input>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutTeam1Input>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type GameUncheckedUpdateManyWithoutTeam2NestedInput = {
    create?: XOR<Enumerable<GameCreateWithoutTeam2Input>, Enumerable<GameUncheckedCreateWithoutTeam2Input>>
    connectOrCreate?: Enumerable<GameCreateOrConnectWithoutTeam2Input>
    upsert?: Enumerable<GameUpsertWithWhereUniqueWithoutTeam2Input>
    createMany?: GameCreateManyTeam2InputEnvelope
    set?: Enumerable<GameWhereUniqueInput>
    disconnect?: Enumerable<GameWhereUniqueInput>
    delete?: Enumerable<GameWhereUniqueInput>
    connect?: Enumerable<GameWhereUniqueInput>
    update?: Enumerable<GameUpdateWithWhereUniqueWithoutTeam2Input>
    updateMany?: Enumerable<GameUpdateManyWithWhereWithoutTeam2Input>
    deleteMany?: Enumerable<GameScalarWhereInput>
  }

  export type TeamCreateNestedOneWithoutPlayersInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    connect?: TeamWhereUniqueInput
  }

  export type AppearanceMatrixCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutPlayerInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutPlayerInput>
    createMany?: AppearanceMatrixCreateManyPlayerInputEnvelope
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
  }

  export type AppearanceMatrixUncheckedCreateNestedManyWithoutPlayerInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutPlayerInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutPlayerInput>
    createMany?: AppearanceMatrixCreateManyPlayerInputEnvelope
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
  }

  export type TeamUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutPlayersInput
    upsert?: TeamUpsertWithoutPlayersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
  }

  export type AppearanceMatrixUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutPlayerInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<AppearanceMatrixUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: AppearanceMatrixCreateManyPlayerInputEnvelope
    set?: Enumerable<AppearanceMatrixWhereUniqueInput>
    disconnect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    delete?: Enumerable<AppearanceMatrixWhereUniqueInput>
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    update?: Enumerable<AppearanceMatrixUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<AppearanceMatrixUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<AppearanceMatrixScalarWhereInput>
  }

  export type AppearanceMatrixUncheckedUpdateManyWithoutPlayerNestedInput = {
    create?: XOR<Enumerable<AppearanceMatrixCreateWithoutPlayerInput>, Enumerable<AppearanceMatrixUncheckedCreateWithoutPlayerInput>>
    connectOrCreate?: Enumerable<AppearanceMatrixCreateOrConnectWithoutPlayerInput>
    upsert?: Enumerable<AppearanceMatrixUpsertWithWhereUniqueWithoutPlayerInput>
    createMany?: AppearanceMatrixCreateManyPlayerInputEnvelope
    set?: Enumerable<AppearanceMatrixWhereUniqueInput>
    disconnect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    delete?: Enumerable<AppearanceMatrixWhereUniqueInput>
    connect?: Enumerable<AppearanceMatrixWhereUniqueInput>
    update?: Enumerable<AppearanceMatrixUpdateWithWhereUniqueWithoutPlayerInput>
    updateMany?: Enumerable<AppearanceMatrixUpdateManyWithWhereWithoutPlayerInput>
    deleteMany?: Enumerable<AppearanceMatrixScalarWhereInput>
  }

  export type GameCreateNestedOneWithoutAppearancesInput = {
    create?: XOR<GameCreateWithoutAppearancesInput, GameUncheckedCreateWithoutAppearancesInput>
    connectOrCreate?: GameCreateOrConnectWithoutAppearancesInput
    connect?: GameWhereUniqueInput
  }

  export type PlayerCreateNestedOneWithoutAppearancesInput = {
    create?: XOR<PlayerCreateWithoutAppearancesInput, PlayerUncheckedCreateWithoutAppearancesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAppearancesInput
    connect?: PlayerWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GameUpdateOneRequiredWithoutAppearancesNestedInput = {
    create?: XOR<GameCreateWithoutAppearancesInput, GameUncheckedCreateWithoutAppearancesInput>
    connectOrCreate?: GameCreateOrConnectWithoutAppearancesInput
    upsert?: GameUpsertWithoutAppearancesInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutAppearancesInput, GameUncheckedUpdateWithoutAppearancesInput>
  }

  export type PlayerUpdateOneRequiredWithoutAppearancesNestedInput = {
    create?: XOR<PlayerCreateWithoutAppearancesInput, PlayerUncheckedCreateWithoutAppearancesInput>
    connectOrCreate?: PlayerCreateOrConnectWithoutAppearancesInput
    upsert?: PlayerUpsertWithoutAppearancesInput
    connect?: PlayerWhereUniqueInput
    update?: XOR<PlayerUpdateWithoutAppearancesInput, PlayerUncheckedUpdateWithoutAppearancesInput>
  }

  export type GameCreateNestedOneWithoutVideosInput = {
    create?: XOR<GameCreateWithoutVideosInput, GameUncheckedCreateWithoutVideosInput>
    connectOrCreate?: GameCreateOrConnectWithoutVideosInput
    connect?: GameWhereUniqueInput
  }

  export type GameUpdateOneRequiredWithoutVideosNestedInput = {
    create?: XOR<GameCreateWithoutVideosInput, GameUncheckedCreateWithoutVideosInput>
    connectOrCreate?: GameCreateOrConnectWithoutVideosInput
    upsert?: GameUpsertWithoutVideosInput
    connect?: GameWhereUniqueInput
    update?: XOR<GameUpdateWithoutVideosInput, GameUncheckedUpdateWithoutVideosInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedFloatWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedFloatFilter
    _min?: NestedFloatFilter
    _max?: NestedFloatFilter
  }

  export type VenueCreateWithoutGamesInput = {
    name: string
    location: string
    capacity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VenueUncheckedCreateWithoutGamesInput = {
    id?: number
    name: string
    location: string
    capacity: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VenueCreateOrConnectWithoutGamesInput = {
    where: VenueWhereUniqueInput
    create: XOR<VenueCreateWithoutGamesInput, VenueUncheckedCreateWithoutGamesInput>
  }

  export type TeamCreateWithoutGames1Input = {
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerCreateNestedManyWithoutTeamInput
    games2?: GameCreateNestedManyWithoutTeam2Input
  }

  export type TeamUncheckedCreateWithoutGames1Input = {
    id?: number
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    games2?: GameUncheckedCreateNestedManyWithoutTeam2Input
  }

  export type TeamCreateOrConnectWithoutGames1Input = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutGames1Input, TeamUncheckedCreateWithoutGames1Input>
  }

  export type TeamCreateWithoutGames2Input = {
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerCreateNestedManyWithoutTeamInput
    games1?: GameCreateNestedManyWithoutTeam1Input
  }

  export type TeamUncheckedCreateWithoutGames2Input = {
    id?: number
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    players?: PlayerUncheckedCreateNestedManyWithoutTeamInput
    games1?: GameUncheckedCreateNestedManyWithoutTeam1Input
  }

  export type TeamCreateOrConnectWithoutGames2Input = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutGames2Input, TeamUncheckedCreateWithoutGames2Input>
  }

  export type VideoCreateWithoutGameInput = {
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoUncheckedCreateWithoutGameInput = {
    id?: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VideoCreateOrConnectWithoutGameInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutGameInput, VideoUncheckedCreateWithoutGameInput>
  }

  export type VideoCreateManyGameInputEnvelope = {
    data: Enumerable<VideoCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type AppearanceMatrixCreateWithoutGameInput = {
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    player: PlayerCreateNestedOneWithoutAppearancesInput
  }

  export type AppearanceMatrixUncheckedCreateWithoutGameInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    player_id: number
  }

  export type AppearanceMatrixCreateOrConnectWithoutGameInput = {
    where: AppearanceMatrixWhereUniqueInput
    create: XOR<AppearanceMatrixCreateWithoutGameInput, AppearanceMatrixUncheckedCreateWithoutGameInput>
  }

  export type AppearanceMatrixCreateManyGameInputEnvelope = {
    data: Enumerable<AppearanceMatrixCreateManyGameInput>
    skipDuplicates?: boolean
  }

  export type VenueUpsertWithoutGamesInput = {
    update: XOR<VenueUpdateWithoutGamesInput, VenueUncheckedUpdateWithoutGamesInput>
    create: XOR<VenueCreateWithoutGamesInput, VenueUncheckedCreateWithoutGamesInput>
  }

  export type VenueUpdateWithoutGamesInput = {
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VenueUncheckedUpdateWithoutGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUpsertWithoutGames1Input = {
    update: XOR<TeamUpdateWithoutGames1Input, TeamUncheckedUpdateWithoutGames1Input>
    create: XOR<TeamCreateWithoutGames1Input, TeamUncheckedCreateWithoutGames1Input>
  }

  export type TeamUpdateWithoutGames1Input = {
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUpdateManyWithoutTeamNestedInput
    games2?: GameUpdateManyWithoutTeam2NestedInput
  }

  export type TeamUncheckedUpdateWithoutGames1Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    games2?: GameUncheckedUpdateManyWithoutTeam2NestedInput
  }

  export type TeamUpsertWithoutGames2Input = {
    update: XOR<TeamUpdateWithoutGames2Input, TeamUncheckedUpdateWithoutGames2Input>
    create: XOR<TeamCreateWithoutGames2Input, TeamUncheckedCreateWithoutGames2Input>
  }

  export type TeamUpdateWithoutGames2Input = {
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUpdateManyWithoutTeamNestedInput
    games1?: GameUpdateManyWithoutTeam1NestedInput
  }

  export type TeamUncheckedUpdateWithoutGames2Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    players?: PlayerUncheckedUpdateManyWithoutTeamNestedInput
    games1?: GameUncheckedUpdateManyWithoutTeam1NestedInput
  }

  export type VideoUpsertWithWhereUniqueWithoutGameInput = {
    where: VideoWhereUniqueInput
    update: XOR<VideoUpdateWithoutGameInput, VideoUncheckedUpdateWithoutGameInput>
    create: XOR<VideoCreateWithoutGameInput, VideoUncheckedCreateWithoutGameInput>
  }

  export type VideoUpdateWithWhereUniqueWithoutGameInput = {
    where: VideoWhereUniqueInput
    data: XOR<VideoUpdateWithoutGameInput, VideoUncheckedUpdateWithoutGameInput>
  }

  export type VideoUpdateManyWithWhereWithoutGameInput = {
    where: VideoScalarWhereInput
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyWithoutVideosInput>
  }

  export type VideoScalarWhereInput = {
    AND?: Enumerable<VideoScalarWhereInput>
    OR?: Enumerable<VideoScalarWhereInput>
    NOT?: Enumerable<VideoScalarWhereInput>
    id?: IntFilter | number
    url?: StringFilter | string
    format?: StringFilter | string
    duration?: IntFilter | number
    resolution?: StringFilter | string
    frameRate?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    game_id?: IntFilter | number
  }

  export type AppearanceMatrixUpsertWithWhereUniqueWithoutGameInput = {
    where: AppearanceMatrixWhereUniqueInput
    update: XOR<AppearanceMatrixUpdateWithoutGameInput, AppearanceMatrixUncheckedUpdateWithoutGameInput>
    create: XOR<AppearanceMatrixCreateWithoutGameInput, AppearanceMatrixUncheckedCreateWithoutGameInput>
  }

  export type AppearanceMatrixUpdateWithWhereUniqueWithoutGameInput = {
    where: AppearanceMatrixWhereUniqueInput
    data: XOR<AppearanceMatrixUpdateWithoutGameInput, AppearanceMatrixUncheckedUpdateWithoutGameInput>
  }

  export type AppearanceMatrixUpdateManyWithWhereWithoutGameInput = {
    where: AppearanceMatrixScalarWhereInput
    data: XOR<AppearanceMatrixUpdateManyMutationInput, AppearanceMatrixUncheckedUpdateManyWithoutAppearancesInput>
  }

  export type AppearanceMatrixScalarWhereInput = {
    AND?: Enumerable<AppearanceMatrixScalarWhereInput>
    OR?: Enumerable<AppearanceMatrixScalarWhereInput>
    NOT?: Enumerable<AppearanceMatrixScalarWhereInput>
    id?: IntFilter | number
    jerseyNumber?: IntFilter | number
    inPoint?: IntFilter | number
    outPoint?: IntFilter | number
    duration?: IntFilter | number
    maxSize?: FloatFilter | number
    prominenceScore?: FloatFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    game_id?: IntFilter | number
    player_id?: IntFilter | number
  }

  export type GameCreateWithoutVenueInput = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team1: TeamCreateNestedOneWithoutGames1Input
    team2: TeamCreateNestedOneWithoutGames2Input
    videos?: VideoCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutVenueInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team1_id: number
    team2_id: number
    videos?: VideoUncheckedCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutVenueInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutVenueInput, GameUncheckedCreateWithoutVenueInput>
  }

  export type GameCreateManyVenueInputEnvelope = {
    data: Enumerable<GameCreateManyVenueInput>
    skipDuplicates?: boolean
  }

  export type GameUpsertWithWhereUniqueWithoutVenueInput = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutVenueInput, GameUncheckedUpdateWithoutVenueInput>
    create: XOR<GameCreateWithoutVenueInput, GameUncheckedCreateWithoutVenueInput>
  }

  export type GameUpdateWithWhereUniqueWithoutVenueInput = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutVenueInput, GameUncheckedUpdateWithoutVenueInput>
  }

  export type GameUpdateManyWithWhereWithoutVenueInput = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGamesInput>
  }

  export type GameScalarWhereInput = {
    AND?: Enumerable<GameScalarWhereInput>
    OR?: Enumerable<GameScalarWhereInput>
    NOT?: Enumerable<GameScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    date?: DateTimeFilter | Date | string
    sport?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    venue_id?: IntFilter | number
    team1_id?: IntFilter | number
    team2_id?: IntFilter | number
  }

  export type PlayerCreateWithoutTeamInput = {
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appearances?: AppearanceMatrixCreateNestedManyWithoutPlayerInput
  }

  export type PlayerUncheckedCreateWithoutTeamInput = {
    id?: number
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutPlayerInput
  }

  export type PlayerCreateOrConnectWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerCreateManyTeamInputEnvelope = {
    data: Enumerable<PlayerCreateManyTeamInput>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutTeam1Input = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue: VenueCreateNestedOneWithoutGamesInput
    team2: TeamCreateNestedOneWithoutGames2Input
    videos?: VideoCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTeam1Input = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team2_id: number
    videos?: VideoUncheckedCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTeam1Input = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTeam1Input, GameUncheckedCreateWithoutTeam1Input>
  }

  export type GameCreateManyTeam1InputEnvelope = {
    data: Enumerable<GameCreateManyTeam1Input>
    skipDuplicates?: boolean
  }

  export type GameCreateWithoutTeam2Input = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue: VenueCreateNestedOneWithoutGamesInput
    team1: TeamCreateNestedOneWithoutGames1Input
    videos?: VideoCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutTeam2Input = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
    videos?: VideoUncheckedCreateNestedManyWithoutGameInput
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutTeam2Input = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutTeam2Input, GameUncheckedCreateWithoutTeam2Input>
  }

  export type GameCreateManyTeam2InputEnvelope = {
    data: Enumerable<GameCreateManyTeam2Input>
    skipDuplicates?: boolean
  }

  export type PlayerUpsertWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
    create: XOR<PlayerCreateWithoutTeamInput, PlayerUncheckedCreateWithoutTeamInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutTeamInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutTeamInput, PlayerUncheckedUpdateWithoutTeamInput>
  }

  export type PlayerUpdateManyWithWhereWithoutTeamInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutPlayersInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: Enumerable<PlayerScalarWhereInput>
    OR?: Enumerable<PlayerScalarWhereInput>
    NOT?: Enumerable<PlayerScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    jerseyNumber?: IntFilter | number
    position?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    team_id?: IntFilter | number
  }

  export type GameUpsertWithWhereUniqueWithoutTeam1Input = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutTeam1Input, GameUncheckedUpdateWithoutTeam1Input>
    create: XOR<GameCreateWithoutTeam1Input, GameUncheckedCreateWithoutTeam1Input>
  }

  export type GameUpdateWithWhereUniqueWithoutTeam1Input = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutTeam1Input, GameUncheckedUpdateWithoutTeam1Input>
  }

  export type GameUpdateManyWithWhereWithoutTeam1Input = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGames1Input>
  }

  export type GameUpsertWithWhereUniqueWithoutTeam2Input = {
    where: GameWhereUniqueInput
    update: XOR<GameUpdateWithoutTeam2Input, GameUncheckedUpdateWithoutTeam2Input>
    create: XOR<GameCreateWithoutTeam2Input, GameUncheckedCreateWithoutTeam2Input>
  }

  export type GameUpdateWithWhereUniqueWithoutTeam2Input = {
    where: GameWhereUniqueInput
    data: XOR<GameUpdateWithoutTeam2Input, GameUncheckedUpdateWithoutTeam2Input>
  }

  export type GameUpdateManyWithWhereWithoutTeam2Input = {
    where: GameScalarWhereInput
    data: XOR<GameUpdateManyMutationInput, GameUncheckedUpdateManyWithoutGames2Input>
  }

  export type TeamCreateWithoutPlayersInput = {
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    games1?: GameCreateNestedManyWithoutTeam1Input
    games2?: GameCreateNestedManyWithoutTeam2Input
  }

  export type TeamUncheckedCreateWithoutPlayersInput = {
    id?: number
    name: string
    league: string
    createdAt?: Date | string
    updatedAt?: Date | string
    games1?: GameUncheckedCreateNestedManyWithoutTeam1Input
    games2?: GameUncheckedCreateNestedManyWithoutTeam2Input
  }

  export type TeamCreateOrConnectWithoutPlayersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type AppearanceMatrixCreateWithoutPlayerInput = {
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game: GameCreateNestedOneWithoutAppearancesInput
  }

  export type AppearanceMatrixUncheckedCreateWithoutPlayerInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
  }

  export type AppearanceMatrixCreateOrConnectWithoutPlayerInput = {
    where: AppearanceMatrixWhereUniqueInput
    create: XOR<AppearanceMatrixCreateWithoutPlayerInput, AppearanceMatrixUncheckedCreateWithoutPlayerInput>
  }

  export type AppearanceMatrixCreateManyPlayerInputEnvelope = {
    data: Enumerable<AppearanceMatrixCreateManyPlayerInput>
    skipDuplicates?: boolean
  }

  export type TeamUpsertWithoutPlayersInput = {
    update: XOR<TeamUpdateWithoutPlayersInput, TeamUncheckedUpdateWithoutPlayersInput>
    create: XOR<TeamCreateWithoutPlayersInput, TeamUncheckedCreateWithoutPlayersInput>
  }

  export type TeamUpdateWithoutPlayersInput = {
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games1?: GameUpdateManyWithoutTeam1NestedInput
    games2?: GameUpdateManyWithoutTeam2NestedInput
  }

  export type TeamUncheckedUpdateWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    league?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    games1?: GameUncheckedUpdateManyWithoutTeam1NestedInput
    games2?: GameUncheckedUpdateManyWithoutTeam2NestedInput
  }

  export type AppearanceMatrixUpsertWithWhereUniqueWithoutPlayerInput = {
    where: AppearanceMatrixWhereUniqueInput
    update: XOR<AppearanceMatrixUpdateWithoutPlayerInput, AppearanceMatrixUncheckedUpdateWithoutPlayerInput>
    create: XOR<AppearanceMatrixCreateWithoutPlayerInput, AppearanceMatrixUncheckedCreateWithoutPlayerInput>
  }

  export type AppearanceMatrixUpdateWithWhereUniqueWithoutPlayerInput = {
    where: AppearanceMatrixWhereUniqueInput
    data: XOR<AppearanceMatrixUpdateWithoutPlayerInput, AppearanceMatrixUncheckedUpdateWithoutPlayerInput>
  }

  export type AppearanceMatrixUpdateManyWithWhereWithoutPlayerInput = {
    where: AppearanceMatrixScalarWhereInput
    data: XOR<AppearanceMatrixUpdateManyMutationInput, AppearanceMatrixUncheckedUpdateManyWithoutAppearancesInput>
  }

  export type GameCreateWithoutAppearancesInput = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue: VenueCreateNestedOneWithoutGamesInput
    team1: TeamCreateNestedOneWithoutGames1Input
    team2: TeamCreateNestedOneWithoutGames2Input
    videos?: VideoCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutAppearancesInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
    team2_id: number
    videos?: VideoUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutAppearancesInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutAppearancesInput, GameUncheckedCreateWithoutAppearancesInput>
  }

  export type PlayerCreateWithoutAppearancesInput = {
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team: TeamCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateWithoutAppearancesInput = {
    id?: number
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team_id: number
  }

  export type PlayerCreateOrConnectWithoutAppearancesInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutAppearancesInput, PlayerUncheckedCreateWithoutAppearancesInput>
  }

  export type GameUpsertWithoutAppearancesInput = {
    update: XOR<GameUpdateWithoutAppearancesInput, GameUncheckedUpdateWithoutAppearancesInput>
    create: XOR<GameCreateWithoutAppearancesInput, GameUncheckedCreateWithoutAppearancesInput>
  }

  export type GameUpdateWithoutAppearancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: VenueUpdateOneRequiredWithoutGamesNestedInput
    team1?: TeamUpdateOneRequiredWithoutGames1NestedInput
    team2?: TeamUpdateOneRequiredWithoutGames2NestedInput
    videos?: VideoUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutAppearancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
    videos?: VideoUncheckedUpdateManyWithoutGameNestedInput
  }

  export type PlayerUpsertWithoutAppearancesInput = {
    update: XOR<PlayerUpdateWithoutAppearancesInput, PlayerUncheckedUpdateWithoutAppearancesInput>
    create: XOR<PlayerCreateWithoutAppearancesInput, PlayerUncheckedCreateWithoutAppearancesInput>
  }

  export type PlayerUpdateWithoutAppearancesInput = {
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team?: TeamUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateWithoutAppearancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team_id?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateWithoutVideosInput = {
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue: VenueCreateNestedOneWithoutGamesInput
    team1: TeamCreateNestedOneWithoutGames1Input
    team2: TeamCreateNestedOneWithoutGames2Input
    appearances?: AppearanceMatrixCreateNestedManyWithoutGameInput
  }

  export type GameUncheckedCreateWithoutVideosInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
    team2_id: number
    appearances?: AppearanceMatrixUncheckedCreateNestedManyWithoutGameInput
  }

  export type GameCreateOrConnectWithoutVideosInput = {
    where: GameWhereUniqueInput
    create: XOR<GameCreateWithoutVideosInput, GameUncheckedCreateWithoutVideosInput>
  }

  export type GameUpsertWithoutVideosInput = {
    update: XOR<GameUpdateWithoutVideosInput, GameUncheckedUpdateWithoutVideosInput>
    create: XOR<GameCreateWithoutVideosInput, GameUncheckedCreateWithoutVideosInput>
  }

  export type GameUpdateWithoutVideosInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: VenueUpdateOneRequiredWithoutGamesNestedInput
    team1?: TeamUpdateOneRequiredWithoutGames1NestedInput
    team2?: TeamUpdateOneRequiredWithoutGames2NestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutVideosInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput
  }

  export type VideoCreateManyGameInput = {
    id?: number
    url: string
    format: string
    duration: number
    resolution: string
    frameRate: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AppearanceMatrixCreateManyGameInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    player_id: number
  }

  export type VideoUpdateWithoutGameInput = {
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyWithoutVideosInput = {
    id?: IntFieldUpdateOperationsInput | number
    url?: StringFieldUpdateOperationsInput | string
    format?: StringFieldUpdateOperationsInput | string
    duration?: IntFieldUpdateOperationsInput | number
    resolution?: StringFieldUpdateOperationsInput | string
    frameRate?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AppearanceMatrixUpdateWithoutGameInput = {
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player?: PlayerUpdateOneRequiredWithoutAppearancesNestedInput
  }

  export type AppearanceMatrixUncheckedUpdateWithoutGameInput = {
    id?: IntFieldUpdateOperationsInput | number
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player_id?: IntFieldUpdateOperationsInput | number
  }

  export type AppearanceMatrixUncheckedUpdateManyWithoutAppearancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    player_id?: IntFieldUpdateOperationsInput | number
  }

  export type GameCreateManyVenueInput = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    team1_id: number
    team2_id: number
  }

  export type GameUpdateWithoutVenueInput = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team1?: TeamUpdateOneRequiredWithoutGames1NestedInput
    team2?: TeamUpdateOneRequiredWithoutGames2NestedInput
    videos?: VideoUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutVenueInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
    videos?: VideoUncheckedUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutGamesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    team1_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
  }

  export type PlayerCreateManyTeamInput = {
    id?: number
    name: string
    jerseyNumber: number
    position: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GameCreateManyTeam1Input = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team2_id: number
  }

  export type GameCreateManyTeam2Input = {
    id?: number
    name: string
    date: Date | string
    sport: string
    createdAt?: Date | string
    updatedAt?: Date | string
    venue_id: number
    team1_id: number
  }

  export type PlayerUpdateWithoutTeamInput = {
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appearances?: AppearanceMatrixUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateWithoutTeamInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutPlayerNestedInput
  }

  export type PlayerUncheckedUpdateManyWithoutPlayersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    position?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GameUpdateWithoutTeam1Input = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: VenueUpdateOneRequiredWithoutGamesNestedInput
    team2?: TeamUpdateOneRequiredWithoutGames2NestedInput
    videos?: VideoUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTeam1Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
    videos?: VideoUncheckedUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutGames1Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team2_id?: IntFieldUpdateOperationsInput | number
  }

  export type GameUpdateWithoutTeam2Input = {
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue?: VenueUpdateOneRequiredWithoutGamesNestedInput
    team1?: TeamUpdateOneRequiredWithoutGames1NestedInput
    videos?: VideoUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateWithoutTeam2Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
    videos?: VideoUncheckedUpdateManyWithoutGameNestedInput
    appearances?: AppearanceMatrixUncheckedUpdateManyWithoutGameNestedInput
  }

  export type GameUncheckedUpdateManyWithoutGames2Input = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    sport?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    venue_id?: IntFieldUpdateOperationsInput | number
    team1_id?: IntFieldUpdateOperationsInput | number
  }

  export type AppearanceMatrixCreateManyPlayerInput = {
    id?: number
    jerseyNumber: number
    inPoint: number
    outPoint: number
    duration: number
    maxSize: number
    prominenceScore: number
    createdAt?: Date | string
    updatedAt?: Date | string
    game_id: number
  }

  export type AppearanceMatrixUpdateWithoutPlayerInput = {
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game?: GameUpdateOneRequiredWithoutAppearancesNestedInput
  }

  export type AppearanceMatrixUncheckedUpdateWithoutPlayerInput = {
    id?: IntFieldUpdateOperationsInput | number
    jerseyNumber?: IntFieldUpdateOperationsInput | number
    inPoint?: IntFieldUpdateOperationsInput | number
    outPoint?: IntFieldUpdateOperationsInput | number
    duration?: IntFieldUpdateOperationsInput | number
    maxSize?: FloatFieldUpdateOperationsInput | number
    prominenceScore?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    game_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}